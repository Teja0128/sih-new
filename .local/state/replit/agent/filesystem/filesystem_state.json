{"file_contents":{"README.md":{"content":"# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n","size_bytes":114},"apphosting.yaml":{"content":"# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n","size_bytes":270},"next.config.ts":{"content":"\nimport type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'picsum.photos',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'thumbs.dreamstime.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'cdn.prod.website-files.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'randomuser.me',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'i.pinimg.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'img.freepik.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'i.postimg.cc',\n        port: '',\n        pathname: '/**',\n      }\n    ],\n  },\n  serverComponentsExternalPackages: ['genkit', '@genkit-ai/core', '@genkit-ai/googleai'],\n};\n\nexport default nextConfig;\n","size_bytes":1488},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./pages/**/*.{ts,tsx}\", \"./components/**/*.{ts,tsx}\", \"./app/**/*.{ts,tsx}\", \"./src/**/*.{ts,tsx}\"],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          soft: \"hsl(var(--primary-soft))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n          soft: \"hsl(var(--secondary-soft))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n          soft: \"hsl(var(--accent-soft))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success))\",\n          foreground: \"hsl(var(--success-foreground))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning))\",\n          foreground: \"hsl(var(--warning-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        \"columbia-blue\": {\n          DEFAULT: \"#C4D8E2\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      backgroundImage: {\n        'gradient-primary': 'var(--gradient-primary)',\n        'gradient-secondary': 'var(--gradient-secondary)',\n        'gradient-hero': 'var(--gradient-hero)',\n        'gradient-subtle': 'var(--gradient-subtle)',\n      },\n      boxShadow: {\n        'soft': 'var(--shadow-soft)',\n        'medium': 'var(--shadow-medium)',\n        'strong': 'var(--shadow-strong)',\n      },\n      transitionTimingFunction: {\n        'smooth': 'var(--transition-smooth)',\n        'quick': 'var(--transition-quick)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" }\n        },\n        \"slide-in\": {\n          \"0%\": { transform: \"translateX(-100%)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateX(0)\", opacity: \"1\" }\n        },\n        \"scale-in\": {\n          \"0%\": { transform: \"scale(0.9)\", opacity: \"0\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" }\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { \n            boxShadow: \"0 0 0 0 hsl(var(--primary) / 0.7)\",\n            transform: \"scale(1)\"\n          },\n          \"50%\": { \n            boxShadow: \"0 0 0 12px hsl(var(--primary) / 0)\",\n            transform: \"scale(1.05)\"\n           }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-in\": \"slide-in 0.4s ease-out\",\n        \"scale-in\": \"scale-in 0.3s ease-out\",\n        \"pulse-glow\": \"pulse-glow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":4586},"docs/blueprint.md":{"content":"# **App Name**: AyuLink\n\n## Core Features:\n\n- Intelligent Diagnosis Search: An auto-complete search widget for diagnoses, drawing from both NAMASTE and ICD-11 TM2, that functions as a tool providing dual-code suggestions based on a user query, filtered by Ayurveda, Siddha, or Unani.\n- NAMASTE Code Validation: Provide real-time validation against the NAMASTE coding rules, ensuring compliance and accuracy in diagnosis entries.\n- ICD-11 TM2 Module Integration: Integrate with the WHO ICD-11 TM2 module, allowing for standardized terminology and coding.\n- FHIR R4 Compliant Patient Records: Enable management of patient records in FHIR R4 format, facilitating interoperability with other healthcare systems.\n- Dual Coding Support: Enable and encourage storage of diagnoses using both NAMASTE and ICD-11 codes.\n- Reporting Dashboard: Generate reports based on the data, formatted for the Ministry of Ayush\n\n## Style Guidelines:\n\n- Primary color: Deep saffron (#FF9933), evoking the heritage of traditional medicine while remaining vibrant. Saffron relates to knowledge and responsibility.\n- Background color: Pale sand (#F5F5DC). This neutral, desaturated tint of the primary color will create a calm, supportive backdrop.\n- Accent color: Sky blue (#87CEEB). A lighter, brighter, less saturated analogous hue that conveys trust.\n- Body and headline font: 'Alegreya', a humanist serif with an elegant, intellectual, contemporary feel, suitable for both headlines and body text.\n- Use clean, modern icons representing various medical conditions and diagnostic categories.\n- Implement a clear, tab-based layout for easy navigation between different sections (Dashboard, Diagnosis Entry, Patient Records, Admin).\n- Use subtle transitions and animations to enhance user experience when navigating between pages or performing actions like code search.","size_bytes":1844},"src/ai/dev.ts":{"content":"'use server';\nimport { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/generate-ministry-of-ayush-report.ts';\nimport '@/ai/flows/intelligent-diagnosis-search.ts';\nimport '@/ai/flows/chatbot-flow.ts';\n","size_bytes":206},"src/ai/genkit.ts":{"content":"import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n","size_bytes":172},"src/app/actions.ts":{"content":"\"use server\";\n\nimport { generateMinistryOfAyushReport, GenerateMinistryOfAyushReportOutput } from \"@/ai/flows/generate-ministry-of-ayush-report\";\nimport { chat } from \"@/ai/flows/chatbot-flow\";\nimport { z } from \"zod\";\n\nexport async function getAyushReport(\n  startDate: Date,\n  endDate: Date\n): Promise<{ report: GenerateMinistryOfAyushReportOutput } | { error: string }> {\n  try {\n    const start = startDate.toISOString().split(\"T\")[0];\n    const end = endDate.toISOString().split(\"T\")[0];\n    \n    // The AI flow now returns the entire report object directly.\n    const reportData = await generateMinistryOfAyushReport({\n      startDate: start,\n      endDate: end,\n    });\n\n    // Return the full structured report object.\n    return { report: reportData };\n  } catch (e) {\n    console.error(\"Error in getAyushReport:\", e);\n    // It's helpful to return a more specific error message if possible.\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n    return { error: `Failed to generate report. Details: ${errorMessage}` };\n  }\n}\n\nconst ChatInputSchema = z.object({\n  message: z.string(),\n  history: z.array(z.object({\n    role: z.enum(['user', 'model']),\n    content: z.array(z.object({ text: z.string() })),\n  })).optional(),\n});\nexport type ChatInput = z.infer<typeof ChatInputSchema>;\n\n\nconst ChatOutputSchema = z.object({\n  response: z.string(),\n});\nexport type ChatOutput = z.infer<typeof ChatOutputSchema>;\n\n\nexport async function getChatbotResponse(input: ChatInput): Promise<ChatOutput> {\n  try {\n    const result = await chat(input);\n    // Safeguard to ensure we always return a valid response object.\n    if (!result || typeof result !== 'string') {\n        console.error(\"Chatbot flow returned an invalid response:\", result);\n        return { response: \"I'm sorry, I could not process that. Please try again.\" };\n    }\n    return { response: result };\n  } catch (e) {\n    console.error(\"Error in getChatbotResponse:\", e);\n    const errorMessage = e instanceof Error ? e.message : \"An unknown error occurred.\";\n    return { response: `Sorry, I encountered an error: ${errorMessage}` };\n  }\n}","size_bytes":2145},"src/app/globals.css":{"content":"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 210 100% 45%;\n    --primary-foreground: 0 0% 100%;\n\n    --secondary: 150 60% 50%;\n    --secondary-foreground: 0 0% 100%;\n\n    --accent: 180 100% 40%;\n    --accent-foreground: 0 0% 100%;\n    \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 210 100% 45%;\n\n    --radius: 0.5rem;\n\n     /* Medical Design System - Professional Healthcare Interface */\n\n    --background: 210 20% 98%;\n    --foreground: 210 15% 10%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 210 15% 10%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 210 15% 10%;\n\n    /* Medical Primary - Trust Blue */\n    --primary: 210 100% 45%;\n    --primary-foreground: 0 0% 100%;\n    --primary-soft: 210 100% 96%;\n\n    /* Medical Secondary - Healing Green */\n    --secondary: 150 60% 50%;\n    --secondary-foreground: 0 0% 100%;\n    --secondary-soft: 150 60% 96%;\n\n    /* Medical Accent - Calm Teal */\n    --accent: 180 100% 40%;\n    --accent-foreground: 0 0% 100%;\n    --accent-soft: 180 100% 96%;\n\n    /* Medical Muted */\n    --muted: 210 15% 96%;\n    --muted-foreground: 210 10% 45%;\n\n    /* Medical States */\n    --success: 120 60% 45%;\n    --success-foreground: 0 0% 100%;\n    --warning: 45 100% 55%;\n    --warning-foreground: 0 0% 100%;\n    --destructive: 0 75% 55%;\n    --destructive-foreground: 0 0% 100%;\n\n    /* UI Elements */\n    --border: 210 20% 90%;\n    --input: 210 20% 96%;\n    --ring: 210 100% 45%;\n\n    /* Medical Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(210 100% 45%), hsl(210 100% 55%));\n    --gradient-secondary: linear-gradient(135deg, hsl(150 60% 50%), hsl(150 60% 60%));\n    --gradient-hero: linear-gradient(135deg, hsl(210 100% 45%), hsl(180 100% 40%));\n    --gradient-subtle: linear-gradient(180deg, hsl(210 20% 98%), hsl(210 15% 96%));\n\n    /* Medical Shadows */\n    --shadow-soft: 0 2px 10px -2px hsl(210 100% 45% / 0.1);\n    --shadow-medium: 0 4px 20px -4px hsl(210 100% 45% / 0.15);\n    --shadow-strong: 0 8px 30px -8px hsl(210 100% 45% / 0.2);\n\n    /* Transitions */\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-quick: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n    --radius: 0.5rem;\n    \n    /* Chart Colors */\n    --chart-1: 34 100% 60%; /* Deep Saffron */\n    --chart-2: 200 80% 65%; /* Sky Blue */\n    --chart-3: 45 20% 55%; /* Earthy Neutral */\n    --chart-4: 340 70% 60%;\n    --chart-5: 280 70% 60%;\n\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    \n    /* Chart Colors */\n    --chart-1: 34 100% 70%;\n    --chart-2: 200 80% 75%;\n    --chart-3: 45 20% 65%;\n    --chart-4: 340 70% 70%;\n    --chart-5: 280 70% 70%;\n    \n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n@layer components {\n    .prose {\n        @apply text-foreground;\n    }\n    .prose h1 {\n        @apply text-3xl font-bold mb-4 border-b pb-2;\n    }\n    .prose h2 {\n        @apply text-2xl font-semibold mb-3 border-b pb-2;\n    }\n    .prose h3 {\n        @apply text-xl font-semibold mb-2;\n    }\n    .prose p {\n        @apply leading-relaxed my-2;\n    }\n    .prose ul {\n        @apply list-disc list-inside space-y-1 my-4 pl-4;\n    }\n     .prose li {\n        @apply mb-1;\n    }\n}\n","size_bytes":4931},"src/app/layout.tsx":{"content":"\nimport type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Inter } from 'next/font/google';\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport GlobalChatbot from \"@/components/global-chatbot\";\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-sans' });\n\n\nexport const metadata: Metadata = {\n  title: \"AyuLink\",\n  description: \"NAMASTE-ICD11 EMR Integration Platform\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body className={`${inter.variable} font-sans antialiased`}>\n        <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n          {children}\n          <GlobalChatbot />\n          <Toaster />\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n","size_bytes":977},"src/app/page.tsx":{"content":"\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { Button } from \"@/components/ui/button\";\nimport { Logo } from \"@/components/icons/logo\";\nimport { PlaceHolderImages } from \"@/lib/placeholder-images\";\nimport AutoLoginDialog from \"@/components/auth/auto-login-dialog\";\nimport { Suspense } from \"react\";\nimport { ArrowRight, Bot, CheckCircle, FileText } from \"lucide-react\";\n\nfunction FeatureCard({ icon, title, description }: { icon: React.ReactNode, title: string, description: string }) {\n  return (\n    <div className=\"flex flex-col items-center p-6 text-center bg-card rounded-xl shadow-soft hover:shadow-medium transition-shadow duration-300\">\n      <div className=\"mb-4 text-primary bg-primary/10 p-3 rounded-full\">{icon}</div>\n      <h3 className=\"mb-2 text-xl font-semibold\">{title}</h3>\n      <p className=\"text-muted-foreground text-sm\">{description}</p>\n    </div>\n  )\n}\n\nexport default function LandingPage() {\n  const heroImage = PlaceHolderImages.find(p => p.id === \"landing-hero\");\n  const feature1Image = PlaceHolderImages.find(p => p.id === \"feature-1\");\n  const feature2Image = PlaceHolderImages.find(p => p.id === \"feature-2\");\n  const feature3Image = PlaceHolderImages.find(p => p.id === \"feature-3\");\n\n  return (\n    <>\n      <Suspense>\n        <AutoLoginDialog />\n      </Suspense>\n      <div className=\"flex flex-col min-h-screen bg-background font-sans text-foreground\">\n        <header className=\"px-4 lg:px-6 h-16 flex items-center shadow-sm sticky top-0 z-50 bg-background/80 backdrop-blur-sm\">\n          <Link href=\"#\" className=\"flex items-center justify-center gap-2\">\n            <Logo className=\"h-7 w-7 text-primary\" />\n            <span className=\"text-xl font-bold tracking-tight\">AyuLink</span>\n          </Link>\n          <nav className=\"ml-auto flex gap-4 sm:gap-6\">\n            <Link href=\"#features\" className=\"text-sm font-medium hover:underline underline-offset-4\">\n              Features\n            </Link>\n            <Link href=\"#about\" className=\"text-sm font-medium hover:underline underline-offset-4\">\n              About\n            </Link>\n             <Button asChild>\n                <Link href=\"/login\">Login / Sign Up</Link>\n            </Button>\n          </nav>\n        </header>\n        <main className=\"flex-1\">\n          <section className=\"w-full py-12 md:py-24 lg:py-28 bg-gradient-subtle\">\n            <div className=\"container px-4 md:px-6 animate-fade-in\">\n              <div className=\"grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]\">\n                <div className=\"flex flex-col justify-center space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h1 className=\"text-4xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none\">\n                      Bridging Traditional Wisdom with Modern Medicine\n                    </h1>\n                    <p className=\"max-w-[600px] text-muted-foreground md:text-xl\">\n                      AyuLink is an intelligent platform integrating NAMASTE and ICD-11 codes to streamline diagnosis and reporting for traditional Indian medicine.\n                    </p>\n                  </div>\n                  <div className=\"flex flex-col gap-2 min-[400px]:flex-row\">\n                    <Button asChild size=\"lg\">\n                      <Link href=\"/login?role=doctor\">\n                        Get Started as a Doctor\n                        <ArrowRight className=\"ml-2 h-5 w-5\" />\n                      </Link>\n                    </Button>\n                     <Button asChild size=\"lg\" variant=\"secondary\">\n                       <Link href=\"/login?role=patient\">\n                        Patient Portal\n                      </Link>\n                    </Button>\n                  </div>\n                </div>\n                 {heroImage && (\n                    <Image\n                      src={heroImage.imageUrl}\n                      alt={heroImage.description}\n                      width={600}\n                      height={600}\n                      className=\"mx-auto aspect-square overflow-hidden rounded-xl object-contain sm:w-full lg:order-last\"\n                      data-ai-hint={heroImage.imageHint}\n                    />\n                )}\n              </div>\n            </div>\n          </section>\n\n          <section id=\"features\" className=\"w-full py-12 md:py-24 lg:py-32 bg-background\">\n            <div className=\"container px-4 md:px-6\">\n              <div className=\"flex flex-col items-center justify-center space-y-4 text-center\">\n                <div className=\"space-y-2\">\n                   <div className=\"inline-block rounded-lg bg-primary/10 px-3 py-1 text-sm text-primary font-semibold\">Key Features</div>\n                  <h2 className=\"text-3xl font-bold tracking-tighter sm:text-5xl\">Why Choose AyuLink?</h2>\n                  <p className=\"max-w-[900px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed\">\n                    AyuLink provides a comprehensive suite of tools designed to enhance diagnostic accuracy, ensure compliance, and improve patient care in traditional medicine.\n                  </p>\n                </div>\n              </div>\n              <div className=\"mx-auto grid max-w-5xl items-start gap-8 sm:grid-cols-2 md:gap-12 lg:max-w-none lg:grid-cols-3 mt-12\">\n                <FeatureCard \n                    icon={<FileText className=\"w-8 h-8\"/>}\n                    title=\"Intelligent Diagnosis Search\"\n                    description=\"Get dual-code suggestions from NAMASTE and ICD-11 with our AI-powered search, filterable by Ayurveda, Siddha, or Unani systems.\"\n                />\n                <FeatureCard \n                    icon={<CheckCircle className=\"w-8 h-8\"/>}\n                    title=\"Real-time Code Validation\"\n                    description=\"Ensure compliance and accuracy with built-in validation against NAMASTE coding rules, reducing errors and saving time.\"\n                />\n                <FeatureCard \n                    icon={<Bot className=\"w-8 h-8\"/>}\n                    title=\"AI-Powered Reporting\"\n                    description=\"Automatically generate insightful reports formatted for the Ministry of Ayush, summarizing trends and system distribution.\"\n                />\n              </div>\n            </div>\n          </section>\n\n          <section id=\"about\" className=\"w-full py-12 md:py-24 lg:py-32 bg-muted/40\">\n            <div className=\"container grid items-center gap-6 px-4 md:px-6 lg:grid-cols-2 lg:gap-12\">\n              <div className=\"space-y-4\">\n                 <div className=\"inline-block rounded-lg bg-primary/10 px-3 py-1 text-sm text-primary font-semibold\">Our Mission</div>\n                <h2 className=\"text-3xl font-bold tracking-tighter sm:text-4xl md:text-5xl\">Empowering Traditional Medicine</h2>\n                <p className=\"max-w-[600px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed\">\n                  Our mission is to provide healthcare professionals with the tools they need to seamlessly integrate traditional medical practices into the modern healthcare ecosystem. By supporting dual coding and FHIR R4 compliance, we facilitate interoperability and advance the global recognition of traditional medicine.\n                </p>\n              </div>\n                {feature2Image && (\n                    <Image\n                    src={feature2Image.imageUrl}\n                    alt={feature2Image.description}\n                    width={550}\n                    height={310}\n                    className=\"mx-auto aspect-video overflow-hidden rounded-xl object-cover object-center sm:w-full\"\n                    data-ai-hint={feature2Image.imageHint}\n                    />\n                )}\n            </div>\n          </section>\n        </main>\n        <footer className=\"flex flex-col gap-2 sm:flex-row py-6 w-full shrink-0 items-center px-4 md:px-6 border-t\">\n          <p className=\"text-xs text-muted-foreground\">&copy; 2024 AyuLink. All rights reserved.</p>\n          <nav className=\"sm:ml-auto flex gap-4 sm:gap-6\">\n            <Link href=\"#\" className=\"text-xs hover:underline underline-offset-4\">\n              Terms of Service\n            </Link>\n            <Link href=\"#\" className=\"text-xs hover:underline underline-offset-4\">\n              Privacy\n            </Link>\n          </nav>\n        </footer>\n      </div>\n    </>\n  );\n}\n","size_bytes":8437},"src/components/global-chatbot.tsx":{"content":"\"use client\";\n\nimport { useChatbotStore } from \"@/hooks/use-chatbot-store\";\nimport { cn } from \"@/lib/utils\";\nimport Chatbot from \"@/components/chatbot/chatbot\";\nimport { Button } from \"@/components/ui/button\";\nimport Image from 'next/image';\n\nexport default function GlobalChatbot() {\n    const { openChatbot } = useChatbotStore();\n\n    return (\n        <>\n            <Chatbot />\n            <Button\n                onClick={openChatbot}\n                className={cn(\n                    'fixed bottom-6 right-6 z-40 h-16 w-16 rounded-full p-2 transition-transform hover:scale-110 bg-transparent'\n                )}\n            >\n              <Image\n                src=\"https://i.pinimg.com/736x/3f/7f/51/3f7f51eeaa56b4c8a80c0c64bc8fa103.jpg\"\n                alt=\"Chatbot Icon\"\n                width={64}\n                height={64}\n                className=\"rounded-full\"\n              />\n            </Button>\n        </>\n    )\n}\n","size_bytes":938},"src/components/markdown-renderer.tsx":{"content":"\nimport React from \"react\";\n\ntype MarkdownRendererProps = {\n  content: string;\n};\n\nconst MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content }) => {\n  if (!content || typeof content !== 'string') {\n    return null;\n  }\n\n  const renderTextWithMarkdown = (text: string) => {\n    // Regex to find **bold** text\n    const boldRegex = /\\*\\*(.*?)\\*\\*/g;\n    const parts = text.split(boldRegex);\n\n    return parts.map((part, index) => {\n      // Every second part is the captured group (the bolded text)\n      if (index % 2 === 1) {\n        return <strong key={index}>{part}</strong>;\n      }\n      return part;\n    });\n  };\n\n  const lines = content.split(\"\\n\");\n\n  const renderLine = (line: string, index: number) => {\n    if (line.startsWith(\"### \")) {\n      return (\n        <h3 key={index} className=\"text-xl font-semibold mt-4 mb-2\">\n          {renderTextWithMarkdown(line.substring(4))}\n        </h3>\n      );\n    }\n    if (line.startsWith(\"## \")) {\n      return (\n        <h2 key={index} className=\"text-2xl font-semibold mt-6 mb-3 border-b pb-2\">\n          {renderTextWithMarkdown(line.substring(3))}\n        </h2>\n      );\n    }\n    if (line.startsWith(\"# \")) {\n      return (\n        <h1 key={index} className=\"text-3xl font-bold mt-8 mb-4 border-b pb-2\">\n          {renderTextWithMarkdown(line.substring(2))}\n        </h1>\n      );\n    }\n    if (line.startsWith(\"- \")) {\n       // This logic groups list items. Find the start of a list.\n      if (index > 0 && lines[index - 1].startsWith('- ')) {\n        return null; // Already processed\n      }\n\n      const listItems = [];\n      let i = index;\n      while (i < lines.length && lines[i].startsWith('- ')) {\n        listItems.push(\n          <li key={i} className=\"mb-1\">\n            {renderTextWithMarkdown(lines[i].substring(2))}\n          </li>\n        );\n        i++;\n      }\n      return <ul key={index} className=\"list-disc list-inside space-y-1 my-4 pl-4\">{listItems}</ul>;\n    }\n    if (line.trim() === \"\") {\n      return <br key={index} />; // Preserve empty lines\n    }\n\n    return (\n      <p key={index} className=\"leading-relaxed my-2\">\n        {renderTextWithMarkdown(line)}\n      </p>\n    );\n  };\n\n  return <div className=\"prose dark:prose-invert max-w-none\">{lines.map(renderLine).filter(Boolean)}</div>;\n};\n\nexport default MarkdownRenderer;\n","size_bytes":2323},"src/components/theme-provider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport type { ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n","size_bytes":327},"src/hooks/use-chatbot-store.ts":{"content":"import { create } from 'zustand';\n\ntype ChatbotState = {\n  isOpen: boolean;\n  openChatbot: () => void;\n  closeChatbot: () => void;\n  toggleChatbot: () => void;\n};\n\nexport const useChatbotStore = create<ChatbotState>((set) => ({\n  isOpen: false,\n  openChatbot: () => set({ isOpen: true }),\n  closeChatbot: () => set({ isOpen: false }),\n  toggleChatbot: () => set((state) => ({ isOpen: !state.isOpen })),\n}));\n","size_bytes":408},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"src/lib/patient-data.ts":{"content":"\nexport type PatientFile = {\n  id: string;\n  patientName: string;\n  dob: string;\n  gender: \"Male\" | \"Female\" | \"Other\";\n  reportType: \"ICD-11\" | \"Namaste\";\n  chiefComplaint: string;\n  vitals: {\n    bloodPressure: string;\n    heartRate: string;\n    temperature: string;\n    respiratoryRate: string;\n  };\n  diagnoses: {\n    code: string;\n    description: string;\n  }[];\n  notes: string;\n};\n\nexport const samplePatientFiles: PatientFile[] = [\n  {\n    id: \"PAT-001\",\n    patientName: \"John Doe\",\n    dob: \"1985-05-15\",\n    gender: \"Male\",\n    reportType: \"ICD-11\",\n    chiefComplaint: \"Severe joint pain, swelling, and stiffness, especially in the wrists and hands.\",\n    vitals: {\n      bloodPressure: \"130/85 mmHg\",\n      heartRate: \"80 bpm\",\n      temperature: \"37.2°C\",\n      respiratoryRate: \"18 breaths/min\",\n    },\n    diagnoses: [\n      { code: \"M65\", description: \"Amavata (Rheumatoid Arthritis)\" },\n    ],\n    notes:\n      \"Patient reports that the pain is worse in the morning. Physical examination reveals inflammation in multiple joints. Suspected Amavata. Recommending further tests and a follow-up.\",\n  },\n  {\n    id: \"PAT-002\",\n    patientName: \"Jane Smith\",\n    dob: \"1992-11-20\",\n    gender: \"Female\",\n    reportType: \"Namaste\",\n    chiefComplaint: \"Lower back pain radiating down the left leg.\",\n    vitals: {\n      bloodPressure: \"110/70 mmHg\",\n      heartRate: \"68 bpm\",\n      temperature: \"36.8°C\",\n      respiratoryRate: \"16 breaths/min\",\n    },\n    diagnoses: [\n      { code: \"NAM-AY-123\", description: \"Amavata (Rheumatoid Arthritis)\" },\n    ],\n    notes:\n      \"Symptoms are consistent with Amavata. Recommended herbal formulations, specific yoga asanas, and lifestyle modifications. Advised to avoid heavy lifting.\",\n  },\n  {\n    id: \"PAT-003\",\n    patientName: \"Aarav Sharma\",\n    dob: \"1978-01-30\",\n    gender: \"Male\",\n    reportType: \"Namaste\",\n    chiefComplaint: \"Recurrent episodes of running nose, sneezing, and nasal congestion.\",\n    vitals: {\n      bloodPressure: \"125/80 mmHg\",\n      heartRate: \"72 bpm\",\n      temperature: \"37.0°C\",\n      respiratoryRate: \"16 breaths/min\",\n    },\n    diagnoses: [\n        { code: \"NAM-UN-789\", description: \"Waja-ul-Mafasil (Polyarthritis)\" }\n    ],\n    notes: \"Patient reports high susceptibility to catching colds. Advised steam inhalation, herbal decoctions, and dietary adjustments to boost immunity.\",\n  },\n   {\n    id: \"PAT-004\",\n    patientName: \"Priya Patel\",\n    dob: \"2001-07-12\",\n    gender: \"Female\",\n    reportType: \"ICD-11\",\n    chiefComplaint: \"Painful, swollen joints with significant morning stiffness.\",\n    vitals: {\n      bloodPressure: \"115/75 mmHg\",\n      heartRate: \"85 bpm\",\n      temperature: \"37.5°C\",\n      respiratoryRate: \"18 breaths/min\",\n    },\n    diagnoses: [\n        { code: \"M15\", description: \"Waja-ul-Mafasil (Polyarthritis)\" }\n    ],\n    notes: \"Clinical presentation suggests Waja-ul-Mafasil. Patient has a family history of autoimmune disorders. Ordered blood tests to confirm diagnosis and will start on Unani treatment protocol.\",\n  },\n    {\n    id: \"PAT-005\",\n    patientName: \"David Chen\",\n    dob: \"1965-09-22\",\n    gender: \"Male\",\n    reportType: \"Namaste\",\n    chiefComplaint: \"Pain radiating along the sciatic nerve.\",\n    vitals: {\n      bloodPressure: \"140/90 mmHg\",\n      heartRate: \"76 bpm\",\n      temperature: \"37.1°C\",\n      respiratoryRate: \"17 breaths/min\",\n    },\n    diagnoses: [\n        { code: \"NAM-AY-101\", description: \"Gridhrasi (Sciatica)\" }\n    ],\n    notes: \"Patient presents with classic symptoms of Gridhrasi. Physical therapy and Ayurvedic oil massage (Abhyanga) recommended. Follow-up in 2 weeks.\",\n  },\n  {\n    id: \"PAT-006\",\n    patientName: \"Emily White\",\n    dob: \"1988-03-18\",\n    gender: \"Female\",\n    reportType: \"ICD-11\",\n    chiefComplaint: \"Chronic rhinitis with nasal discharge and headache.\",\n    vitals: {\n      bloodPressure: \"120/80 mmHg\",\n      heartRate: \"70 bpm\",\n      temperature: \"36.9°C\",\n      respiratoryRate: \"16 breaths/min\",\n    },\n    diagnoses: [\n        { code: \"J00\", description: \"Nazla (Common Cold)\" }\n    ],\n    notes: \"Patient has a history of allergies. Symptoms are consistent with Nazla. Unani treatment focusing on improving immunity and reducing inflammation prescribed. Advised to avoid cold and damp environments.\",\n  },\n];\n","size_bytes":4312},"src/lib/placeholder-images.ts":{"content":"import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n","size_bytes":239},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/services/namaste-api.ts":{"content":"import { z } from 'zod';\nimport mockData from '@/lib/mock-data.json';\n\nexport const NamasteRecord = z.object({\n  namasteCode: z.string().optional(),\n  description: z.string(),\n  system: z.enum(['Ayurveda', 'Siddha', 'Unani', 'Unspecified']).optional(),\n  NUMC_CODE: z.string().optional(),\n  NUMC_TERM: z.string().optional(),\n  Short_definition: z.string().optional(),\n});\nexport type NamasteRecord = z.infer<typeof NamasteRecord>;\n\nexport async function searchNamaste(query: string, filter?: 'Ayurveda' | 'Siddha' | 'Unani'): Promise<NamasteRecord[]> {\n  console.log(`Searching mock data for: \"${query}\" with filter: \"${filter}\"`);\n  \n  const results = mockData.filter((item: any) => {\n    const description = item.description || item.Long_definition || item.Short_definition || item.NUMC_TERM || \"\";\n    const arabicTerm = item.Arabic_term || \"\";\n    const numcCode = item.NUMC_CODE || \"\";\n    const namasteCode = item.namasteCode || \"\";\n\n    const queryLower = query.toLowerCase();\n\n    // Prioritize exact matches or whole word matches if possible\n    const searchTerms = [description, arabicTerm, numcCode, namasteCode].map(t => t.toLowerCase());\n    return searchTerms.some(term => term.includes(queryLower));\n  });\n\n  const mappedResults = results.map((item: any) => ({\n    namasteCode: item.namasteCode || item.NUMC_CODE,\n    description: item.description || item.Long_definition || item.Short_definition || item.NUMC_TERM,\n    system: item.system || (item.NUMC_CODE?.startsWith('UM-') ? 'Unani' : 'Unspecified'),\n  }));\n\n  let finalResults = mappedResults;\n\n  if (filter) {\n    finalResults = mappedResults.filter(item => {\n        if (filter === 'Unani' && item.system === 'Unspecified' && item.namasteCode?.startsWith('UM-')) {\n            return true;\n        }\n        return item.system === filter;\n    });\n  }\n\n  // Remove duplicates\n  const uniqueResults = Array.from(new Map(finalResults.map(item => [item.namasteCode, item])).values());\n\n  return uniqueResults;\n}\n","size_bytes":1981},"src/services/who-api.ts":{"content":"\nimport { z } from 'zod';\nimport mockData from '@/lib/mock-data.json';\n\nexport const WhoIcd11Record = z.object({\n  icd11Code: z.string(),\n  description: z.string(),\n});\nexport type WhoIcd11Record = z.infer<typeof WhoIcd11Record>;\n\nexport async function searchWhoIcd11(query: string): Promise<WhoIcd11Record[]> {\n  console.log(`Searching mock WHO data for: \"${query}\"`);\n\n  // Simulate a network delay\n  await new Promise(resolve => setTimeout(resolve, 250));\n\n  const results = mockData.filter((item: any) => {\n    const description = item.description || item.Long_definition || item.Short_definition || item.NUMC_TERM || \"\";\n    const icd11Code = item.icd11Code || \"\";\n    const queryLower = query.toLowerCase();\n\n    return description.toLowerCase().includes(queryLower) || icd11Code.toLowerCase().includes(queryLower);\n  });\n  \n  const mappedResults = results.map((item: any) => ({\n    icd11Code: item.icd11Code || 'N/A',\n    description: item.description || item.Long_definition || item.Short_definition || item.NUMC_TERM,\n  })).filter(item => item.icd11Code !== 'N/A');\n\n  // Remove duplicates\n  const uniqueResults = Array.from(new Map(mappedResults.map(item => [item.icd11Code, item])).values());\n  \n  return uniqueResults;\n}\n","size_bytes":1233},"src/ai/flows/chatbot-flow.ts":{"content":"'use server';\n/**\n * @fileOverview A simple chatbot flow that uses Gemini to generate responses.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst ChatHistorySchema = z.array(\n  z.object({\n    role: z.enum(['user', 'model']),\n    content: z.array(z.object({ text: z.string() })),\n  })\n);\n\nconst ChatInputSchema = z.object({\n  message: z.string().describe(\"The user's message.\"),\n  history: ChatHistorySchema.optional().describe('The chat history.'),\n});\nexport type ChatInput = z.infer<typeof ChatInputSchema>;\n\n\nexport async function chat(input: ChatInput): Promise<string> {\n    const { message, history } = input;\n  \n    const result = await ai.generate({\n      model: 'googleai/gemini-2.5-flash',\n      history: history,\n      prompt: `You are a helpful AI assistant named AyuLink Assistant. \n    Your role is to assist users of the AyuLink platform, which integrates traditional Indian medicine (Ayurveda, Siddha, Unani) with modern ICD-11 coding.\n\n    - Be friendly, professional, and concise.\n    - If you don't know an answer, say so.\n    - Your knowledge is based on the application's context.\n    - If asked about something you cannot do, politely explain your limitations.\n    \n    When you provide a direct answer to the user's question, wrap it in markdown bold syntax like this: **This is the answer.**\n\n    Start the conversation by introducing yourself and asking how you can help, unless a history is provided.\n    \n    User Question: ${message}\n    \n    Your Answer:`,\n    });\n  \n    const responseText = result.text || \"Sorry, I am having trouble responding right now. Please try again later.\";\n  \n    return responseText;\n  }","size_bytes":1669},"src/ai/flows/generate-ministry-of-ayush-report.ts":{"content":"'use server';\n/**\n * @fileOverview Generates reports for the Ministry of Ayush.\n *\n * - generateMinistryOfAyushReport - A function that handles the report generation process.\n * - GenerateMinistryOfAyushReportInput - The input type for the generateMinistryOfAyushReport function.\n * - GenerateMinistryOfAyushReportOutput - The return type for the generateMinistryOfAyushReport function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { samplePatientFiles } from '@/lib/patient-data';\n\nconst GenerateMinistryOfAyushReportInputSchema = z.object({\n  startDate: z.string().describe('The start date for the report (YYYY-MM-DD).'),\n  endDate: z.string().describe('The end date for the report (YYYY-MM-DD).'),\n});\nexport type GenerateMinistryOfAyushReportInput = z.infer<typeof GenerateMinistryOfAyushReportInputSchema>;\n\n\nconst DiagnosisDetailSchema = z.object({\n  code: z.string().describe('The diagnosis code (either NAMASTE or ICD-11).'),\n  description: z.string().describe('The description of the diagnosis.'),\n  count: z.number().describe('The number of times this diagnosis was recorded.'),\n});\n\nconst SystemDistributionSchema = z.object({\n  system: z.enum(['Ayurveda', 'Siddha', 'Unani', 'ICD-11', 'Namaste', 'Unknown']).describe('The medical system.'),\n  count: z.number().describe('The number of diagnoses for this system.'),\n  percentage: z.number().describe('The percentage of total diagnoses for this system.'),\n});\n\nconst GenerateMinistryOfAyushReportOutputSchema = z.object({\n  summary: z.object({\n    totalDiagnoses: z.number().describe('Total number of diagnoses recorded in the period.'),\n    uniquePatients: z.number().describe('Number of unique patients diagnosed.'),\n    topSystem: z.string().describe('The most frequently used medical system (e.g., Ayurveda).'),\n  }),\n  namasteBreakdown: z.array(DiagnosisDetailSchema).describe('Breakdown of the top 5 NAMASTE diagnoses.'),\n  icd11Breakdown: z.array(DiagnosisDetailSchema).describe('Breakdown of the top 5 ICD-11 diagnoses.'),\n  systemDistribution: z.array(SystemDistributionSchema).describe('Distribution of diagnoses across different systems.'),\n  narrative: z.string().describe('A markdown-formatted narrative summary of the key findings and trends.'),\n});\nexport type GenerateMinistryOfAyushReportOutput = z.infer<typeof GenerateMinistryOfAyushReportOutputSchema>;\n\nexport async function generateMinistryOfAyushReport(input: GenerateMinistryOfAyushReportInput): Promise<GenerateMinistryOfAyushReportOutput> {\n  return generateMinistryOfAyushReportFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateMinistryOfAyushReportPrompt',\n  input: {schema: z.object({\n    startDate: z.string(),\n    endDate: z.string(),\n    patientData: z.string(),\n  })},\n  output: {schema: GenerateMinistryOfAyushReportOutputSchema},\n  prompt: `You are an expert in analyzing medical data and generating reports for the Ministry of Ayush.\n\nAnalyze the following patient data JSON provided for the period between {{{startDate}}} and {{{endDate}}}.\n\nPatient Data:\n\\`\\`\\`json\n{{{patientData}}}\n\\`\\`\\`\n\nYour task is to generate a structured report based on this data. The output MUST be in the specified JSON format.\n\nReport requirements:\n1.  **Summary**: Calculate the total number of diagnoses, the count of unique patients, and identify the most frequent medical system.\n2.  **NAMASTE Breakdown**: List the top 5 most frequent diagnoses based on their NAMASTE codes, including their code, description, and count.\n3.  **ICD-11 Breakdown**: List the top 5 most frequent diagnoses based on their ICD-11 codes, including their code, description, and count.\n4.  **System Distribution**: Provide the count and percentage for each medical system (Ayurveda, Siddha, Unani, and general ICD-11/Namaste).\n5.  **Narrative**: Write a brief, insightful narrative in markdown that summarizes the key findings, highlights any noticeable trends, and provides context for the Ministry of Ayush.\n\nGenerate the full JSON object as your response.\n`,\n});\n\nconst generateMinistryOfAyushReportFlow = ai.defineFlow(\n  {\n    name: 'generateMinistryOfAyushReportFlow',\n    inputSchema: GenerateMinistryOfAyushReportInputSchema,\n    outputSchema: GenerateMinistryOfAyushReportOutputSchema,\n  },\n  async (input) => {\n    // NOTE: In a real app, you'd fetch data from a database based on the date range.\n    // Here, we'll use the mock data for demonstration.\n    const relevantPatientData = samplePatientFiles; // Using all mock data regardless of date.\n\n    const {output} = await prompt({\n      ...input,\n      patientData: JSON.stringify(relevantPatientData, null, 2),\n    });\n    return output!;\n  }\n);\n","size_bytes":4659},"src/ai/flows/intelligent-diagnosis-search.ts":{"content":"'use server';\n\n/**\n * @fileOverview An intelligent diagnosis search flow that provides dual-code suggestions from both NAMASTE and ICD-11 TM2.\n *\n * - intelligentDiagnosisSearch - A function that handles the diagnosis search process.\n * - IntelligentDiagnosisSearchInput - The input type for the intelligentDiagnosisSearch function.\n * - IntelligentDiagnosisSearchOutput - The return type for the intelligentDiagnosisSearch function.\n */\n\nimport { z } from 'genkit';\nimport { searchNamaste } from '@/services/namaste-api';\nimport { searchWhoIcd11 } from '@/services/who-api';\n\nconst IntelligentDiagnosisSearchInputSchema = z.object({\n  query: z.string().describe('The diagnosis search query.'),\n  filter: z\n    .enum(['Ayurveda', 'Siddha', 'Unani'])\n    .optional()\n    .describe('The filter to apply to the search results.'),\n});\nexport type IntelligentDiagnosisSearchInput = z.infer<typeof IntelligentDiagnosisSearchInputSchema>;\n\nconst IntelligentDiagnosisSearchOutputSchema = z.object({\n  results: z.array(\n    z.object({\n      namasteCode: z.string().describe('The NAMASTE code.'),\n      icd11Code: z.string().describe('The ICD-11 code.'),\n      description: z.string().describe('The description of the diagnosis.'),\n    })\n  ).describe('The search results.'),\n});\nexport type IntelligentDiagnosisSearchOutput = z.infer<typeof IntelligentDiagnosisSearchOutputSchema>;\n\n/**\n * Performs a local search for NAMASTE data and a live API search for ICD-11 data,\n * then correlates them.\n */\nexport async function intelligentDiagnosisSearch(\n  input: IntelligentDiagnosisSearchInput\n): Promise<IntelligentDiagnosisSearchOutput> {\n  const { query, filter } = input;\n\n  // 1. Search for NAMASTE records from the local mock data.\n  const namasteResults = await searchNamaste(query, filter);\n\n  if (!namasteResults.length) {\n    return { results: [] };\n  }\n\n  // 2. For each NAMASTE result, find the corresponding ICD-11 code from the WHO API.\n  const correlatedResultsPromises = namasteResults.map(async (namasteRecord) => {\n    // Use the description from the NAMASTE record to find a matching ICD-11 record.\n    const whoResults = await searchWhoIcd11(namasteRecord.description);\n\n    // Find the best match (or first match) from the WHO results.\n    const icd11Code = whoResults.length > 0 ? whoResults[0].icd11Code : 'N/A';\n\n    return {\n      namasteCode: namasteRecord.namasteCode || 'N/A',\n      icd11Code: icd11Code,\n      description: namasteRecord.description,\n    };\n  });\n  \n  const correlatedResults = await Promise.all(correlatedResultsPromises);\n\n  // Remove duplicates that might arise from the search.\n  const uniqueResults = Array.from(new Map(correlatedResults.map(item => [item.namasteCode + item.icd11Code, item])).values());\n\n  return {\n    results: uniqueResults,\n  };\n}\n","size_bytes":2789},"src/app/(auth)/layout.tsx":{"content":"\nexport default function AuthLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return <div className=\"min-h-screen\">{children}</div>;\n}\n","size_bytes":148},"src/app/(main)/layout.tsx":{"content":"'use client';\n\nimport { useSearchParams } from 'next/navigation';\nimport AppHeader from '@/components/layout/app-header';\nimport {\n  DoctorSidebarNav,\n  PatientSidebarNav,\n} from '@/components/layout/sidebar-nav';\nimport { Logo } from '@/components/icons/logo';\nimport {\n  SidebarProvider,\n  Sidebar,\n  SidebarHeader,\n  SidebarContent,\n  SidebarInset,\n  SidebarFooter,\n} from '@/components/ui/sidebar';\nimport { Separator } from '@/components/ui/separator';\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport Link from 'next/link';\nimport Chatbot from '@/components/chatbot/chatbot';\nimport BottomNav from '@/components/layout/bottom-nav';\n\nexport default function MainLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'doctor';\n\n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <Link href={`/?role=${role}`} className=\"flex items-center gap-2\">\n            <Logo className=\"size-8 text-primary\" />\n            <span className=\"text-xl font-semibold tracking-tight\">\n              AyuLink\n            </span>\n          </Link>\n        </SidebarHeader>\n        <Separator />\n        <SidebarContent>\n          {role === 'doctor' ? <DoctorSidebarNav /> : <PatientSidebarNav />}\n        </SidebarContent>\n        <Separator />\n        <SidebarFooter>\n          <Button variant=\"ghost\" className=\"w-full justify-start\" asChild>\n            <Link href=\"/\">\n              <LogOut />\n              <span>Log Out</span>\n            </Link>\n          </Button>\n        </SidebarFooter>\n      </Sidebar>\n      <SidebarInset className=\"flex flex-col bg-muted/40\">\n        <AppHeader />\n        <main className=\"flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8 pb-20 md:pb-8\">\n          <div className=\"mx-auto max-w-7xl\">{children}</div>\n        </main>\n        \n        <Chatbot />\n        \n        <BottomNav />\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n","size_bytes":2020},"src/components/auth/auto-login-dialog.tsx":{"content":"\n\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Logo } from \"@/components/icons/logo\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst SESSION_STORAGE_KEY = \"autoLoginDismissed\";\n\nexport default function AutoLoginDialog() {\n  const [open, setOpen] = useState(false);\n  const router = useRouter();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const dismissed = sessionStorage.getItem(SESSION_STORAGE_KEY);\n    if (!dismissed) {\n      const timer = setTimeout(() => {\n        setOpen(true);\n      }, 1500); // Delay before showing the dialog\n      return () => clearTimeout(timer);\n    }\n  }, []);\n\n  const handleLogin = (role: \"doctor\" | \"patient\") => {\n    toast({\n      title: \"Login Successful\",\n      description: `Welcome! Redirecting to your dashboard...`,\n    });\n    router.push(`/dashboard?role=${role}`);\n    setOpen(false);\n  };\n\n  const handleClose = () => {\n    sessionStorage.setItem(SESSION_STORAGE_KEY, \"true\");\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex justify-center items-center gap-3 mb-2\">\n            <Logo className=\"size-9 text-primary\" />\n            <DialogTitle className=\"text-3xl font-bold tracking-tight\">\n              Welcome to AyuLink\n            </DialogTitle>\n          </div>\n          <DialogDescription className=\"text-center text-lg\">\n            Access your personalized dashboard in one click.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 py-4\">\n          <Button\n            onClick={() => handleLogin(\"doctor\")}\n            className=\"h-14 text-lg\"\n          >\n            Login as Doctor\n          </Button>\n          <Button\n            onClick={() => handleLogin(\"patient\")}\n            variant=\"secondary\"\n            className=\"h-14 text-lg\"\n          >\n            Login as Patient\n          </Button>\n        </div>\n        <DialogFooter className=\"sm:justify-center\">\n          <Button type=\"button\" variant=\"link\" onClick={handleClose}>\n            Login Later\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2490},"src/components/chatbot/chatbot.tsx":{"content":"'use client';\n\nimport { useState, useRef, useEffect, useTransition } from 'react';\nimport { Bot, User, CornerDownLeft, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useChatbotStore } from '@/hooks/use-chatbot-store';\nimport { getChatbotResponse } from '@/app/actions';\nimport { cn } from '@/lib/utils';\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\nimport { useToast } from '@/hooks/use-toast';\nimport MarkdownRenderer from '@/components/markdown-renderer';\n\ntype Message = {\n  role: 'user' | 'model';\n  content: { text: string }[];\n};\n\nexport default function Chatbot() {\n  const { isOpen, closeChatbot } = useChatbotStore();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState('');\n  const [isPending, startTransition] = useTransition();\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      startTransition(async () => {\n        try {\n            const initialResponse = await getChatbotResponse({ message: 'Hello' });\n            if (initialResponse && initialResponse.response) {\n              setMessages([\n              {\n                  role: 'model',\n                  content: [{ text: initialResponse.response }],\n              },\n              ]);\n            } else {\n               throw new Error(\"Received an empty initial response.\");\n            }\n        } catch (error) {\n            toast({\n                variant: 'destructive',\n                title: 'Chatbot Error',\n                description: 'Could not initialize the chatbot. Please try again.'\n            });\n            console.error('Chatbot initialization failed:', error);\n        }\n      });\n    }\n  }, [isOpen, messages.length, toast]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  const handleSend = () => {\n    if (input.trim() === '') return;\n\n    const userMessage: Message = {\n      role: 'user',\n      content: [{ text: input }],\n    };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n\n    startTransition(async () => {\n        try {\n            const history = [...messages, userMessage];\n            const res = await getChatbotResponse({\n                message: input,\n                history: history,\n            });\n\n            if (res && res.response) {\n              const modelMessage: Message = {\n                  role: 'model',\n                  content: [{ text: res.response }],\n              };\n              setMessages((prev) => [...prev, modelMessage]);\n            } else {\n              throw new Error(\"Received an empty response from the server.\");\n            }\n        } catch (error) {\n             const errorMessage = error instanceof Error ? error.message : \"An unexpected error occurred.\";\n             toast({\n                variant: 'destructive',\n                title: 'Chatbot Error',\n                description: `Could not get a response. Details: ${errorMessage}`\n            });\n            console.error('Chatbot response failed:', error);\n             const errorResponseMessage: Message = {\n                role: 'model',\n                content: [{ text: \"Sorry, I'm having trouble connecting. Please check your setup and try again.\" }],\n            };\n            setMessages((prev) => [...prev, errorResponseMessage]);\n        }\n    });\n  };\n\n  return (\n    <div\n      className={cn(\n        'fixed bottom-4 right-4 z-50 w-full max-w-sm rounded-lg border bg-card shadow-xl transition-transform duration-300 ease-in-out',\n        isOpen ? 'translate-x-0' : 'translate-x-[calc(100%+2rem)]'\n      )}\n    >\n      <div className=\"flex flex-col h-[60vh]\">\n        <header className=\"flex items-center justify-between p-4 border-b\">\n          <div className=\"flex items-center gap-3\">\n            <Bot className=\"w-7 h-7 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">AyuLink Assistant</h3>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={closeChatbot}>\n            <span className=\"text-2xl\">&times;</span>\n          </Button>\n        </header>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((msg, index) => (\n            <div\n              key={index}\n              className={cn(\n                'flex items-start gap-3',\n                msg.role === 'user' ? 'justify-end' : 'justify-start'\n              )}\n            >\n              {msg.role === 'model' && (\n                <Avatar className=\"w-8 h-8 border-2 border-primary\">\n                    <AvatarFallback>\n                        <Bot className=\"w-5 h-5\" />\n                    </AvatarFallback>\n                </Avatar>\n              )}\n              <div\n                className={cn(\n                  'max-w-xs rounded-lg p-3 text-sm',\n                  msg.role === 'user'\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted'\n                )}\n              >\n                <MarkdownRenderer content={msg.content.map((c) => c.text).join('')} />\n              </div>\n               {msg.role === 'user' && (\n                <Avatar className=\"w-8 h-8 border\">\n                    <AvatarFallback>\n                        <User className=\"w-5 h-5\" />\n                    </AvatarFallback>\n                </Avatar>\n              )}\n            </div>\n          ))}\n          {isPending && messages.length > 0 && messages[messages.length-1].role === 'user' && (\n             <div className=\"flex items-start gap-3 justify-start\">\n                <Avatar className=\"w-8 h-8 border-2 border-primary\">\n                    <AvatarFallback>\n                        <Bot className=\"w-5 h-5\" />\n                    </AvatarFallback>\n                </Avatar>\n                 <div className=\"max-w-xs rounded-lg p-3 text-sm bg-muted\">\n                    <Loader2 className=\"w-5 h-5 animate-spin\" />\n                 </div>\n             </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        <div className=\"p-4 border-t\">\n          <div className=\"relative\">\n            <Input\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleSend()}\n              placeholder=\"Ask me anything...\"\n              className=\"pr-12\"\n              disabled={isPending}\n            />\n            <Button\n              type=\"submit\"\n              size=\"icon\"\n              className=\"absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8\"\n              onClick={handleSend}\n              disabled={isPending || !input.trim()}\n            >\n              <CornerDownLeft className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6949},"src/components/icons/logo.tsx":{"content":"\nimport { cn } from \"@/lib/utils\";\n\nexport const Logo = ({ className }: { className?: string }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={cn(\"size-6\", className)}\n  >\n    <title>AyuLink Logo</title>\n    <path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" />\n    <path d=\"M12 8V16\" />\n    <path d=\"M8 12H16\" />\n    <path d=\"M15 15C15 16.6569 13.6569 18 12 18C10.3431 18 9 16.6569 9 15\" />\n    <path d=\"M9 9C9 7.34315 10.3431 6 12 6C13.6569 6 15 7.34315 15 9\" />\n  </svg>\n);\n","size_bytes":710},"src/components/layout/app-header.tsx":{"content":"\n\"use client\";\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { LogOut, Settings, ArrowLeft } from \"lucide-react\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function AppHeader() {\n  const pathname = usePathname();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'doctor';\n\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const mainContent = document.querySelector(\"main\");\n    const handleScroll = () => {\n        if (mainContent) {\n            setScrolled(mainContent.scrollTop > 5);\n        }\n    };\n    if (mainContent) {\n        mainContent.addEventListener(\"scroll\", handleScroll);\n    }\n    return () => {\n        if (mainContent) {\n            mainContent.removeEventListener(\"scroll\", handleScroll);\n        }\n    }\n  }, []);\n  \n  const getPageTitle = () => {\n    if (pathname.startsWith(\"/patients\")) {\n      return \"Patient Records\";\n    }\n    switch (pathname) {\n      case \"/dashboard\":\n        return \"Dashboard\";\n      case \"/search\":\n        return \"Diagnosis Search\";\n      case \"/reporting\":\n        return \"Reporting\";\n      case \"/upload\":\n        return \"Upload Report\";\n       case \"/settings\":\n        return \"Settings\";\n      default:\n        return \"AyuLink\";\n    }\n  };\n\n  const handleLogout = () => {\n    router.push('/'); \n  }\n  \n  const userName = role === 'doctor' ? 'Dr. Anya Sharma' : 'John Doe';\n  const userEmail = role === 'doctor' ? 'doctor.anya@ayulink.com' : 'patient.john@ayulink.com';\n  const avatarSeed = role === 'doctor' ? 'doc-avatar' : 'patient-avatar';\n\n  const showBackButton = pathname !== '/dashboard';\n\n  return (\n    <header className={cn(\n      \"sticky top-0 z-30 flex h-16 items-center gap-4 border-b bg-background/80 px-4 backdrop-blur-xl sm:px-6 transition-shadow\",\n      scrolled && \"shadow-md\"\n    )}>\n      <div className=\"flex items-center gap-4\">\n        <div className=\"md:hidden\">\n            <SidebarTrigger />\n        </div>\n        {showBackButton && (\n          <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\" onClick={() => router.back()}>\n            <ArrowLeft className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Go back</span>\n          </Button>\n        )}\n        <div className=\"hidden md:block\">\n            <h1 className=\"text-xl font-semibold tracking-tight\">\n            {getPageTitle()}\n            </h1>\n        </div>\n      </div>\n\n      <div className=\"ml-auto flex items-center gap-2\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\">\n              <Avatar className=\"h-9 w-9 border\">\n                <AvatarImage\n                  src={`https://picsum.photos/seed/${avatarSeed}/100/100`}\n                  alt=\"User Avatar\"\n                />\n                <AvatarFallback>{userName.charAt(0)}</AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n            <DropdownMenuLabel className=\"font-normal\">\n              <div className=\"flex flex-col space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {userName}\n                </p>\n                <p className=\"text-xs leading-none text-muted-foreground\">\n                  {userEmail}\n                </p>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem asChild>\n              <Link href={`/settings?role=${role}`}>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </Link>\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem onClick={handleLogout}>\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4515},"src/components/layout/bottom-nav.tsx":{"content":"\n'use client';\n\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport { Home, Search, Upload, Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { useChatbotStore } from '@/hooks/use-chatbot-store';\nimport { Button } from '../ui/button';\n\n\nexport default function BottomNav() {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'doctor';\n  const { openChatbot } = useChatbotStore();\n\n  const navItems =\n    role === 'doctor'\n      ? [\n          { href: '/dashboard', icon: Home, label: 'Home' },\n          { href: '/search', icon: Search, label: 'Search' },\n          { href: '/upload', icon: Upload, label: 'Upload' },\n        ]\n      : [{ href: '/dashboard', icon: Home, label: 'Home' }];\n\n  return (\n    <div className=\"fixed bottom-0 left-0 z-50 w-full h-16 bg-background border-t md:hidden\">\n      <div className={cn(\"grid h-full max-w-lg mx-auto font-medium\", role === 'doctor' ? 'grid-cols-4' : 'grid-cols-2' )}>\n        {navItems.map((item) => {\n          const isActive = pathname === item.href;\n          return (\n            <Link\n              key={item.label}\n              href={`${item.href}?role=${role}`}\n              className={cn(\n                'inline-flex flex-col items-center justify-center px-5 hover:bg-muted-foreground/10 group',\n                isActive\n                  ? 'text-primary'\n                  : 'text-muted-foreground'\n              )}\n            >\n              <item.icon\n                className={cn(\n                  'w-6 h-6 mb-1',\n                )}\n              />\n              <span className=\"text-xs\">{item.label}</span>\n            </Link>\n          );\n        })}\n        <Button\n            variant=\"ghost\"\n            onClick={openChatbot}\n            className=\"inline-flex flex-col items-center justify-center px-5 hover:bg-muted-foreground/10 group text-muted-foreground h-full\"\n        >\n            <Bot className=\"w-6 h-6 mb-1\" />\n            <span className=\"text-xs\">Chat</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2132},"src/components/layout/sidebar-nav.tsx":{"content":"\n\"use client\";\n\nimport Link from \"next/link\";\nimport { usePathname, useSearchParams } from \"next/navigation\";\nimport {\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n} from \"@/components/ui/sidebar\";\nimport { LayoutDashboard, Users, FileText, Search, Settings, Home, FileUp } from \"lucide-react\";\n\nconst doctorMenuItems = [\n   {\n    href: \"/\",\n    icon: Home,\n    label: \"Homepage\",\n  },\n  {\n    href: \"/dashboard\",\n    icon: LayoutDashboard,\n    label: \"Dashboard\",\n  },\n  {\n    href: \"/patients\",\n    icon: Users,\n    label: \"Patients\",\n  },\n  {\n    href: \"/reporting\",\n    icon: FileText,\n    label: \"Reporting\",\n  },\n  {\n    href: \"/search\",\n    icon: Search,\n    label: \"Diagnosis Search\",\n  },\n   {\n    href: \"/upload\",\n    icon: FileUp,\n    label: \"Upload Report\",\n  },\n  {\n    href: \"/settings\",\n    icon: Settings,\n    label: \"Settings\",\n  }\n];\n\nconst patientMenuItems = [\n   {\n    href: \"/\",\n    icon: Home,\n    label: \"Homepage\",\n  },\n  {\n    href: \"/dashboard\",\n    icon: LayoutDashboard,\n    label: \"My Dashboard\",\n  },\n   {\n    href: \"/settings\",\n    icon: Settings,\n    label: \"Settings\",\n  }\n];\n\nexport function DoctorSidebarNav() {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'doctor';\n\n\n  return (\n    <SidebarMenu>\n      {doctorMenuItems.map((item) => (\n        <SidebarMenuItem key={item.href}>\n          <SidebarMenuButton\n            asChild\n            isActive={pathname === item.href && item.href !== '/'}\n            tooltip={item.label}\n          >\n            <Link href={`${item.href}?role=${role}`}>\n              <item.icon />\n              <span>{item.label}</span>\n            </Link>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  );\n}\n\nexport function PatientSidebarNav() {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'patient';\n\n  return (\n    <SidebarMenu>\n      {patientMenuItems.map((item) => (\n        <SidebarMenuItem key={item.href}>\n          <SidebarMenuButton\n            asChild\n            isActive={pathname === item.href && item.href !== '/'}\n            tooltip={item.label}\n          >\n            <Link href={`${item.href}?role=${role}`}>\n              <item.icon />\n              <span>{item.label}</span>\n            </Link>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      ))}\n    </SidebarMenu>\n  );\n}\n\n// Default export can be one of them or a combined component if needed\nexport const SidebarNav = DoctorSidebarNav;\n","size_bytes":2589},"src/components/patients/patient-files-wrapper.tsx":{"content":"import {\n  Card,\n  CardContent,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport PatientFiles from \"./patient-files\";\nimport { samplePatientFiles } from \"@/lib/patient-data\";\n\nexport default async function PatientFilesWrapper({ query }: { query: string }) {\n  // In a real app, you would fetch this data from a database\n  const files = samplePatientFiles.filter(\n    (file) =>\n      file.id.toLowerCase().includes(query.toLowerCase()) ||\n      file.patientName.toLowerCase().includes(query.toLowerCase())\n  );\n\n  return <PatientFiles files={files} query={query} />;\n}\n\nexport function PatientFilesSkeleton() {\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      {Array.from({ length: 8 }).map((_, i) => (\n        <Card key={i}>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <Skeleton className=\"h-6 w-24\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-4 w-20 mt-1\" />\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1180},"src/components/patients/patient-files.tsx":{"content":"\n\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { FilePlus2, FileText, User } from \"lucide-react\";\nimport PatientReportView from \"./patient-report-view\";\nimport { type PatientFile } from \"@/lib/patient-data\";\nimport { Badge } from \"../ui/badge\";\n\nexport default function PatientFiles({ files, query }: { files: PatientFile[], query: string }) {\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n      {files.map((file) => (\n        <Dialog key={file.id}>\n          <DialogTrigger asChild>\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-base font-medium\">\n                  {file.patientName}\n                </CardTitle>\n                <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm text-muted-foreground\">\n                  Patient ID: {file.id}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  DOB: {file.dob}\n                </div>\n                 <div className=\"text-sm text-muted-foreground pt-2 font-medium\">\n                  {file.diagnoses.map(d => d.description).join(', ')}\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Badge variant={file.reportType === 'ICD-11' ? 'secondary' : 'default'}>{file.reportType} Report</Badge>\n              </CardFooter>\n            </Card>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogTitle className=\"sr-only\">\n                Patient Report: {file.patientName} ({file.id})\n            </DialogTitle>\n            <PatientReportView report={file} />\n          </DialogContent>\n        </Dialog>\n      ))}\n       {files.length === 0 && (\n        <p className=\"col-span-full text-center text-muted-foreground\">\n          No patient files found for &quot;{query}&quot;.\n        </p>\n      )}\n    </div>\n  );\n}\n","size_bytes":2439},"src/components/patients/patient-report-view.tsx":{"content":"\n\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport type { PatientFile } from \"@/lib/patient-data\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRightLeft, Loader2 } from \"lucide-react\";\nimport { intelligentDiagnosisSearch } from \"@/ai/flows/intelligent-diagnosis-search\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ntype ConvertedDiagnosis = {\n  namasteCode: string;\n  icd11Code: string;\n  description: string;\n};\n\nexport default function PatientReportView({ report }: { report: PatientFile }) {\n  const [isPending, startTransition] = useTransition();\n  const [convertedData, setConvertedData] = useState<\n    ConvertedDiagnosis[] | null\n  >(null);\n\n  const handleConversion = () => {\n    setConvertedData(null);\n    startTransition(async () => {\n      try {\n        const conversionPromises = report.diagnoses.map(async (dx) => {\n          const searchResult = await intelligentDiagnosisSearch({\n            query: dx.description,\n          });\n\n          // Find the best match from the results\n          const bestMatch = searchResult.results.find(\n            (res) =>\n              res.description.toLowerCase().includes(dx.description.toLowerCase()) ||\n              dx.description.toLowerCase().includes(res.description.toLowerCase())\n          );\n\n          if (report.reportType === 'Namaste') {\n            return {\n              namasteCode: dx.code,\n              description: dx.description,\n              icd11Code: bestMatch?.icd11Code || 'N/A',\n            };\n          } else { // ICD-11\n            return {\n              icd11Code: dx.code,\n              description: dx.description,\n              namasteCode: bestMatch?.namasteCode || 'N/A',\n            };\n          }\n        });\n\n        const finalConverted = await Promise.all(conversionPromises);\n\n        setConvertedData(finalConverted);\n      } catch (error) {\n        console.error(\"Conversion failed:\", error);\n      }\n    });\n  };\n\n  const targetFormat = report.reportType === \"ICD-11\" ? \"Namaste\" : \"ICD-11\";\n\n  return (\n    <div className=\"space-y-6 p-2\">\n      <CardHeader className=\"p-0\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-2xl\">\n              Patient Report: {report.patientName}\n            </CardTitle>\n            <CardDescription>\n              Patient ID: {report.id} | DOB: {report.dob} | Gender:{\" \"}\n              {report.gender}\n            </CardDescription>\n          </div>\n           <Badge variant={report.reportType === 'ICD-11' ? 'secondary' : 'default'} className=\"text-sm\">{report.reportType} Report</Badge>\n        </div>\n      </CardHeader>\n      \n      <Separator />\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <h3 className=\"font-semibold text-lg\">Chief Complaint</h3>\n          <p className=\"text-muted-foreground\">{report.chiefComplaint}</p>\n        </div>\n        <div className=\"space-y-4\">\n          <h3 className=\"font-semibold text-lg\">Vitals</h3>\n          <ul className=\"list-disc list-inside text-muted-foreground space-y-1\">\n            {Object.entries(report.vitals).map(([key, value]) => (\n              <li key={key}>\n                <span className=\"font-medium text-foreground capitalize\">{key.replace(/([A-Z])/g, ' $1')}:</span> {value}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Diagnoses</CardTitle>\n              <CardDescription>\n                Official diagnoses recorded for this patient.\n              </CardDescription>\n            </div>\n            <Button onClick={handleConversion} disabled={isPending} size=\"sm\">\n              {isPending ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <ArrowRightLeft className=\"mr-2 h-4 w-4\" />\n              )}\n              Convert to {targetFormat}\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4\">\n            <div className=\"space-y-2\">\n                <h4 className=\"font-semibold text-center pb-2 border-b\">Original Diagnoses ({report.reportType})</h4>\n                 <ul className=\"space-y-2\">\n                    {report.diagnoses.map((dx, index) => (\n                    <li key={index} className=\"p-2 rounded-md bg-muted/50\">\n                        <p className=\"font-semibold\">{dx.description}</p>\n                        <p className=\"text-sm text-muted-foreground\">Code: {dx.code}</p>\n                    </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"space-y-2\">\n                 <h4 className=\"font-semibold text-center pb-2 border-b\">Converted Diagnoses ({targetFormat})</h4>\n                 {isPending && (\n                     <div className=\"space-y-2 pt-2\">\n                         <Skeleton className=\"h-12 w-full\" />\n                         <Skeleton className=\"h-12 w-full\" />\n                     </div>\n                 )}\n                 {convertedData && (\n                     <ul className=\"space-y-2\">\n                        {convertedData.map((dx, index) => (\n                        <li key={index} className=\"p-2 rounded-md bg-accent/50\">\n                            <p className=\"font-semibold\">{dx.description}</p>\n                            <p className=\"text-sm text-accent-foreground\">Code: {report.reportType === 'Namaste' ? dx.icd11Code : dx.namasteCode}</p>\n                        </li>\n                        ))}\n                    </ul>\n                 )}\n                 {!isPending && !convertedData && (\n                     <div className=\"flex items-center justify-center h-full text-muted-foreground text-center\">\n                         <p>Click the convert button to see the {targetFormat} codes.</p>\n                     </div>\n                 )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <div className=\"space-y-2\">\n        <h3 className=\"font-semibold text-lg\">Clinician&apos;s Notes</h3>\n        <p className=\"text-muted-foreground whitespace-pre-wrap\">{report.notes}</p>\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":6584},"src/components/patients/patient-search.tsx":{"content":"\"use client\";\n\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function PatientSearch({ placeholder }: { placeholder: string }) {\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n  const { replace } = useRouter();\n\n  const handleSearch = useDebouncedCallback((term: string) => {\n    const params = new URLSearchParams(searchParams);\n    if (term) {\n      params.set(\"query\", term);\n    } else {\n      params.delete(\"query\");\n    }\n    replace(`${pathname}?${params.toString()}`);\n  }, 300);\n\n  return (\n    <div className=\"relative flex-1 md:flex-grow-0\">\n      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n      <Input\n        type=\"search\"\n        placeholder={placeholder}\n        className=\"w-full rounded-lg bg-background pl-10 md:w-[200px] lg:w-[320px]\"\n        onChange={(e) => handleSearch(e.target.value)}\n        defaultValue={searchParams.get(\"query\")?.toString()}\n      />\n    </div>\n  );\n}\n","size_bytes":1161},"src/components/reporting/report-display.tsx":{"content":"\n\"use client\";\n\nimport React from \"react\";\nimport type { GenerateMinistryOfAyushReportOutput } from \"@/ai/flows/generate-ministry-of-ayush-report\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport MarkdownRenderer from \"@/components/markdown-renderer\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport { FileText, Syringe, Users } from \"lucide-react\";\n\ntype ReportDisplayProps = {\n  report: GenerateMinistryOfAyushReportOutput;\n};\n\nconst chartColors = [\n  \"hsl(var(--chart-1))\",\n  \"hsl(var(--chart-2))\",\n  \"hsl(var(--chart-3))\",\n  \"hsl(var(--chart-4))\",\n  \"hsl(var(--chart-5))\",\n];\n\nexport default function ReportDisplay({ report }: ReportDisplayProps) {\n  const { summary, namasteBreakdown, icd11Breakdown, systemDistribution, narrative } = report;\n\n  const pieData = systemDistribution.map((item) => ({\n    name: item.system,\n    value: item.count,\n  }));\n\n  const CustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\n    const RADIAN = Math.PI / 180;\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    // Don't render label for small percentages to avoid overlap\n    if (percent < 0.03) {\n      return null;\n    }\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill=\"white\"\n        textAnchor=\"middle\"\n        dominantBaseline=\"central\"\n        className=\"text-xs font-bold\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n\n  return (\n    <>\n      <div className=\"space-y-8 animate-fade-in p-4 bg-background\">\n        <Card>\n            <CardHeader>\n              <CardTitle>Report Summary</CardTitle>\n              <CardDescription>\n                An overview of the key metrics from the generated report.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-6 md:grid-cols-3\">\n                  <Card>\n                      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Total Diagnoses</CardTitle>\n                          <Syringe className=\"h-5 w-5 text-secondary\" />\n                      </CardHeader>\n                      <CardContent>\n                          <div className=\"text-4xl font-bold\">{summary.totalDiagnoses}</div>\n                      </CardContent>\n                  </Card>\n                  <Card>\n                      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Unique Patients</CardTitle>\n                          <Users className=\"h-5 w-5 text-primary\" />\n                      </CardHeader>\n                      <CardContent>\n                          <div className=\"text-4xl font-bold\">{summary.uniquePatients}</div>\n                      </CardContent>\n                  </Card>\n                  <Card>\n                      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                          <CardTitle className=\"text-sm font-medium\">Top System</CardTitle>\n                          <FileText className=\"h-5 w-5 text-accent\" />\n                      </CardHeader>\n                      <CardContent>\n                          <div className=\"text-4xl font-bold\">{summary.topSystem}</div>\n                      </CardContent>\n                  </Card>\n              </div>\n            </CardContent>\n          </Card>\n\n        <div className=\"grid gap-8 lg:grid-cols-5\">\n          <Card className=\"lg:col-span-3\">\n            <CardHeader>\n              <CardTitle>System Distribution</CardTitle>\n              <CardDescription>\n                Breakdown of diagnoses by medical system.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"h-[350px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={pieData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={<CustomLabel />}\n                    outerRadius={120}\n                    dataKey=\"value\"\n                  >\n                    {pieData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={chartColors[index % chartColors.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      background: \"hsl(var(--background))\",\n                      border: \"1px solid hsl(var(--border))\",\n                      borderRadius: \"var(--radius)\",\n                    }}\n                  />\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle>Narrative Summary</CardTitle>\n              <CardDescription>\n                AI-generated insights and trends.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-sm\">\n              <MarkdownRenderer content={narrative} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid gap-8 md:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Top 5 NAMASTE Diagnoses</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Code</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead className=\"text-right\">Count</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {namasteBreakdown.map((dx) => (\n                    <TableRow key={dx.code}>\n                      <TableCell>\n                        <Badge variant=\"default\">{dx.code}</Badge>\n                      </TableCell>\n                      <TableCell>{dx.description}</TableCell>\n                      <TableCell className=\"text-right font-medium\">{dx.count}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Top 5 ICD-11 Diagnoses</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Code</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead className=\"text-right\">Count</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {icd11Breakdown.map((dx) => (\n                    <TableRow key={dx.code}>\n                      <TableCell>\n                        <Badge variant=\"secondary\">{dx.code}</Badge>\n                      </TableCell>\n                      <TableCell>{dx.description}</TableCell>\n                      <TableCell className=\"text-right font-medium\">{dx.count}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":7859},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4434},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8 text-base\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1911},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2709},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1875},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10479},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7433},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5629},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23381},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"src/components/ui/textarea.tsx":{"content":"import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n","size_bytes":709},"src/components/ui/toast.tsx":{"content":"\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-right-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4815},"src/components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"src/app/(auth)/login/login-form.tsx":{"content":"\n\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\nimport Image from \"next/image\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Logo } from \"@/components/icons/logo\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { PlaceHolderImages } from \"@/lib/placeholder-images\";\nimport Link from \"next/link\";\n\nexport default function LoginForm() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n  \n  const initialRole = searchParams.get('role') === 'patient' ? 'patient' : 'doctor';\n  \n  const [email, setEmail] = useState(initialRole === 'doctor' ? \"doctor.anya@ayulink.com\" : \"patient.john@ayulink.com\");\n  const [password, setPassword] = useState(\"password\");\n  const [role, setRole] = useState<\"doctor\" | \"patient\">(initialRole);\n  const loginImage = PlaceHolderImages.find(p => p.id === \"login-hero\");\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (role === 'doctor' && email === \"doctor.anya@ayulink.com\" && password === \"password\") {\n       toast({\n        title: \"Login Successful\",\n        description: `Welcome back, Dr. Sharma!`,\n      });\n      router.push(`/dashboard?role=${role}`);\n    } else if (role === 'patient' && email === \"patient.john@ayulink.com\" && password === \"password\") {\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, John!`,\n      });\n      router.push(`/dashboard?role=${role}`);\n    } else {\n      toast({\n        variant: \"destructive\",\n        title: \"Login Failed\",\n        description: \"Invalid credentials for the selected role.\",\n      });\n    }\n  };\n\n  const handleRoleChange = (value: string) => {\n    const newRole = value as \"doctor\" | \"patient\";\n    setRole(newRole);\n    if (newRole === 'patient') {\n      setEmail(\"patient.john@ayulink.com\");\n    } else {\n      setEmail(\"doctor.anya@ayulink.com\");\n    }\n    router.replace(`/login?role=${newRole}`, { scroll: false });\n  }\n\n  return (\n    <div className=\"w-full min-h-screen lg:grid lg:grid-cols-2\">\n      <div className=\"flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mx-auto grid w-[380px] gap-8\">\n          <div className=\"grid gap-4 text-center\">\n             <Link href=\"/\" className=\"flex justify-center items-center gap-3 mb-2\">\n               <Logo className=\"size-9 text-primary\" />\n                <h1 className=\"text-4xl font-bold tracking-tight\">AyuLink</h1>\n            </Link>\n            <p className=\"text-balance text-muted-foreground text-lg\">\n              Login to access your personalized dashboard.\n            </p>\n          </div>\n          <form onSubmit={handleLogin} className=\"grid gap-6\">\n             <div className=\"grid gap-2\">\n                <Label htmlFor=\"role\" className=\"text-base\">Your Role</Label>\n                 <Select value={role} onValueChange={handleRoleChange}>\n                    <SelectTrigger className=\"text-base h-11\">\n                        <SelectValue placeholder=\"Select your role\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"doctor\">Doctor</SelectItem>\n                        <SelectItem value=\"patient\">Patient</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\" className=\"text-base\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"m@example.com\"\n                required\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"h-11 text-base\"\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <div className=\"flex items-center\">\n                <Label htmlFor=\"password\"  className=\"text-base\">Password</Label>\n                <a\n                  href=\"#\"\n                  className=\"ml-auto inline-block text-sm text-primary hover:underline\"\n                >\n                  Forgot your password?\n                </a>\n              </div>\n              <Input \n                id=\"password\" \n                type=\"password\" \n                required \n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                 className=\"h-11 text-base\"\n              />\n            </div>\n            <Button type=\"submit\" className=\"w-full h-12 text-lg font-semibold\">\n              Login\n            </Button>\n          </form>\n        </div>\n      </div>\n      <div className=\"hidden bg-muted lg:block relative\">\n        {loginImage && (\n            <Image\n            src={loginImage.imageUrl}\n            alt={loginImage.description}\n            fill\n            className=\"object-cover\"\n            data-ai-hint={loginImage.imageHint}\n            priority\n            />\n        )}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-background/30 to-transparent\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5339},"src/app/(auth)/login/page.tsx":{"content":"\nimport { Suspense } from \"react\";\nimport LoginForm from \"./login-form\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nfunction LoginSkeleton() {\n  return (\n    <div className=\"w-full min-h-screen lg:grid lg:grid-cols-2\">\n      <div className=\"flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"mx-auto grid w-[380px] gap-8\">\n          <div className=\"grid gap-4 text-center\">\n            <div className=\"flex justify-center items-center gap-3 mb-2\">\n              <Skeleton className=\"size-9 rounded-full\" />\n              <Skeleton className=\"h-10 w-32\" />\n            </div>\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-3/4 mx-auto\" />\n          </div>\n          <div className=\"grid gap-6\">\n            <div className=\"grid gap-2\">\n              <Skeleton className=\"h-5 w-20\" />\n              <Skeleton className=\"h-11 w-full\" />\n            </div>\n            <div className=\"grid gap-2\">\n              <Skeleton className=\"h-5 w-20\" />\n              <Skeleton className=\"h-11 w-full\" />\n            </div>\n            <div className=\"grid gap-2\">\n              <Skeleton className=\"h-5 w-20\" />\n              <Skeleton className=\"h-11 w-full\" />\n            </div>\n            <Skeleton className=\"h-12 w-full\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"hidden bg-muted lg:block relative\">\n        <Skeleton className=\"h-full w-full\" />\n      </div>\n    </div>\n  );\n}\n\n\nexport default function LoginPageContainer() {\n  return (\n    <Suspense fallback={<LoginSkeleton />}>\n      <LoginForm />\n    </Suspense>\n  );\n}\n","size_bytes":1634},"src/app/(main)/dashboard/doctor-dashboard.tsx":{"content":"\n\"use client\";\n\nimport { Suspense } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\nimport { Bar, BarChart, CartesianGrid, XAxis, YAxis, Legend, ResponsiveContainer } from \"recharts\";\nimport type { ChartConfig } from \"@/components/ui/chart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Activity, FileText, Users, Syringe } from 'lucide-react';\nimport type { PatientFile } from '@/lib/patient-data';\nimport PatientFiles from '@/components/patients/patient-files';\n\n\nconst chartData = [\n  { month: \"January\", ayurveda: 186, siddha: 80, unani: 50 },\n  { month: \"February\", ayurveda: 305, siddha: 200, unani: 120 },\n  { month: \"March\", ayurveda: 237, siddha: 120, unani: 190 },\n  { month: \"April\", ayurveda: 73, siddha: 190, unani: 40 },\n  { month: \"May\", ayurveda: 209, siddha: 130, unani: 160 },\n  { month: \"June\", ayurveda: 214, siddha: 140, unani: 180 },\n];\n\nconst chartConfig = {\n  ayurveda: {\n    label: \"Ayurveda\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  siddha: {\n    label: \"Siddha\",\n    color: \"hsl(var(--chart-2))\",\n  },\n  unani: {\n    label: \"Unani\",\n    color: \"hsl(var(--chart-3))\",\n  },\n} satisfies ChartConfig;\n\nconst recentDiagnoses = [\n  {\n    patient: \"Patient-001\",\n    diagnosis: \"Amavata\",\n    namasteCode: \"NAM-AY-123\",\n    icd11Code: \"M65\",\n    practitioner: \"Dr. Sharma\",\n    system: \"Ayurveda\",\n  },\n  {\n    patient: \"Patient-002\",\n    diagnosis: \"Vali Azhal Keel Vayu\",\n    namasteCode: \"NAM-SI-456\",\n    icd11Code: \"M05\",\n    practitioner: \"Dr. Kumar\",\n    system: \"Siddha\",\n  },\n  {\n    patient: \"Patient-003\",\n    diagnosis: \"Waja-ul-Mafasil\",\n    namasteCode: \"NAM-UN-789\",\n    icd11Code: \"M15\",\n    practitioner: \"Dr. Khan\",\n    system: \"Unani\",\n  },\n  {\n    patient: \"Patient-004\",\n    diagnosis: \"Gridhrasi\",\n    namasteCode: \"NAM-AY-101\",\n    icd11Code: \"M54.3\",\n    practitioner: \"Dr. Sharma\",\n    system: \"Ayurveda\",\n  },\n  {\n    patient: \"Patient-005\",\n    diagnosis: \"Nazla\",\n    namasteCode: \"NAM-UN-112\",\n    icd11Code: \"J00\",\n    practitioner: \"Dr. Khan\",\n    system: \"Unani\",\n  },\n];\n\nexport default function DoctorDashboard({ files }: { files: PatientFile[] }) {\n    return (\n        <div className=\"flex flex-col gap-8\">\n            <h1 className=\"text-3xl font-bold tracking-tight\">Doctor Dashboard</h1>\n            <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n                <Card className=\"transition-all hover:shadow-lg hover:border-primary cursor-pointer\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">\n                        Total Patients\n                        </CardTitle>\n                        <Users className=\"h-5 w-5 text-primary\" />\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-4xl font-bold\">573</div>\n                        <p className=\"text-xs text-muted-foreground\">\n                        +20 since last month\n                        </p>\n                    </CardContent>\n                </Card>\n                <Card className=\"transition-all hover:shadow-lg hover:border-primary cursor-pointer\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">\n                        Diagnoses This Month\n                        </CardTitle>\n                        <Syringe className=\"h-5 w-5 text-secondary\" />\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-4xl font-bold\">1,204</div>\n                        <p className=\"text-xs text-muted-foreground\">\n                        +180 since last month\n                        </p>\n                    </CardContent>\n                </Card>\n                <Card className=\"transition-all hover:shadow-lg hover:border-primary cursor-pointer\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">Reports Filed</CardTitle>\n                        <FileText className=\"h-5 w-5 text-accent\" />\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-4xl font-bold\">892</div>\n                        <p className=\"text-xs text-muted-foreground\">\n                        +52 since last week\n                        </p>\n                    </CardContent>\n                </Card>\n                <Card className=\"transition-all hover:shadow-lg hover:border-primary cursor-pointer\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">System Activity</CardTitle>\n                        <Activity className=\"h-5 w-5 text-warning\" />\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-4xl font-bold\">High</div>\n                         <p className=\"text-xs text-muted-foreground\">\n                        Normal operational status\n                        </p>\n                    </CardContent>\n                </Card>\n            </div>\n\n            <div className=\"grid gap-8 lg:grid-cols-2\">\n                <Card>\n                <CardHeader>\n                    <CardTitle>Diagnosis Trends</CardTitle>\n                    <CardDescription>Monthly diagnosis trends by system</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <ChartContainer config={chartConfig} className=\"h-[300px] w-full\">\n                    <ResponsiveContainer>\n                    <BarChart data={chartData} margin={{ top: 20, right: 20, bottom: 5, left: 0 }}>\n                        <CartesianGrid vertical={false} />\n                        <XAxis\n                        dataKey=\"month\"\n                        tickLine={false}\n                        tickMargin={10}\n                        axisLine={false}\n                        tickFormatter={(value) => value.slice(0, 3)}\n                        />\n                        <YAxis />\n                        <ChartTooltip\n                        cursor={false}\n                        content={<ChartTooltipContent />}\n                        />\n                         <Legend />\n                        <Bar\n                        dataKey=\"ayurveda\"\n                        fill=\"var(--color-ayurveda)\"\n                        radius={[4, 4, 0, 0]}\n                        />\n                        <Bar dataKey=\"siddha\" fill=\"var(--color-siddha)\" radius={[4, 4, 0, 0]} />\n                        <Bar dataKey=\"unani\" fill=\"var(--color-unani)\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                    </ResponsiveContainer>\n                    </ChartContainer>\n                </CardContent>\n                </Card>\n                <Card>\n                <CardHeader>\n                    <CardTitle>Recent Diagnoses</CardTitle>\n                    <CardDescription>\n                    A list of the most recent diagnoses across the system.\n                    </CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <Table>\n                    <TableHeader>\n                        <TableRow>\n                        <TableHead>Patient</TableHead>\n                        <TableHead>Diagnosis</TableHead>\n                        <TableHead>System</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        {recentDiagnoses.map((dx) => (\n                        <TableRow key={dx.patient}>\n                            <TableCell className=\"font-medium\">{dx.patient}</TableCell>\n                            <TableCell>{dx.diagnosis}</TableCell>\n                            <TableCell>\n                            <Badge\n                                variant={\n                                dx.system === \"Ayurveda\"\n                                    ? \"default\"\n                                    : dx.system === \"Siddha\"\n                                    ? \"secondary\"\n                                    : \"outline\"\n                                }\n                            >\n                                {dx.system}\n                            </Badge>\n                            </TableCell>\n                        </TableRow>\n                        ))}\n                    </TableBody>\n                    </Table>\n                </CardContent>\n                </Card>\n            </div>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle>Patient Files</CardTitle>\n                    <CardDescription>Recently accessed patient files.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <PatientFiles files={files} query=\"\" />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n","size_bytes":9385},"src/app/(main)/dashboard/page.tsx":{"content":"\nimport DoctorDashboard from './doctor-dashboard';\nimport PatientDashboard from './patient-dashboard';\nimport { samplePatientFiles } from '@/lib/patient-data';\n\ntype DashboardPageProps = {\n  searchParams: {\n    role?: 'doctor' | 'patient';\n  };\n};\n\nexport default async function DashboardPage({ searchParams }: DashboardPageProps) {\n  const role = searchParams?.role || 'doctor';\n\n  if (role === 'patient') {\n    // In a real app, you would fetch this data based on the logged-in user\n    const patientFiles = samplePatientFiles.filter(file => file.id === \"PAT-001\");\n    return <PatientDashboard files={patientFiles} />;\n  }\n  \n  // In a real app, you would fetch this data from a database\n  const files = samplePatientFiles.filter(\n    (file) =>\n      file.id.toLowerCase().includes(\"\".toLowerCase()) ||\n      file.patientName.toLowerCase().includes(\"\".toLowerCase())\n  );\n\n  return <DoctorDashboard files={files} />;\n}\n","size_bytes":922},"src/app/(main)/dashboard/patient-dashboard.tsx":{"content":"\n\"use client\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport PatientFiles from \"@/components/patients/patient-files\";\nimport { type PatientFile } from \"@/lib/patient-data\";\n\nexport default function PatientDashboard({ files }: { files: PatientFile[] }) {\n    return (\n         <div className=\"flex flex-col gap-8\">\n            <h1 className=\"text-3xl font-bold tracking-tight\">My Health Dashboard</h1>\n            <Card>\n                <CardHeader>\n                    <CardTitle>My Reports</CardTitle>\n                    <CardDescription>A list of your personal medical reports.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <PatientFiles files={files} query=\"PAT-001\" />\n                </CardContent>\n            </Card>\n        </div>\n    )\n}\n","size_bytes":871},"src/app/(main)/patients/page.tsx":{"content":"import { Suspense } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport PatientSearch from \"@/components/patients/patient-search\";\nimport PatientFilesWrapper, { PatientFilesSkeleton } from \"@/components/patients/patient-files-wrapper\";\n\ntype PatientsPageProps = {\n  searchParams: {\n    query?: string;\n  };\n};\n\nexport default function PatientsPage({ searchParams }: PatientsPageProps) {\n  const query = searchParams?.query || \"\";\n\n  return (\n    <div className=\"space-y-8 animate-fadeIn\">\n      <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Patient Records</h1>\n          <p className=\"text-muted-foreground\">\n            Search, view, and manage patient files.\n          </p>\n        </div>\n        <PatientSearch placeholder=\"Search by Patient ID or Name...\" />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Patient Files</CardTitle>\n          <CardDescription>\n            A list of all patient files in the system.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Suspense key={query} fallback={<PatientFilesSkeleton />}>\n            <PatientFilesWrapper query={query} />\n          </Suspense>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1399},"src/app/(main)/reporting/page.tsx":{"content":"\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon, Loader2 } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getAyushReport } from \"@/app/actions\";\nimport ReportDisplay from \"@/components/reporting/report-display\";\nimport type { GenerateMinistryOfAyushReportOutput } from \"@/ai/flows/generate-ministry-of-ayush-report\";\n\nconst FormSchema = z.object({\n  dateRange: z.object({\n    from: z.date({\n      required_error: \"A start date is required.\",\n    }),\n    to: z.date({\n      required_error: \"An end date is required.\",\n    }),\n  }),\n});\n\nexport default function ReportingPage() {\n  const [isPending, startTransition] = useTransition();\n  const [report, setReport] = useState<GenerateMinistryOfAyushReportOutput | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n  });\n\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    setReport(null);\n    startTransition(async () => {\n      const result = await getAyushReport(\n        data.dateRange.from,\n        data.dateRange.to\n      );\n      if (\"error\" in result) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: result.error,\n        });\n      } else {\n        setReport(result.report);\n      }\n    });\n  }\n\n  const today = new Date();\n  const yesterday = new Date(today);\n  yesterday.setDate(today.getDate() - 1);\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          Ministry of Ayush Reporting\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Generate real-time morbidity data reports for compliance.\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Generate Report</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n              <FormField\n                control={form.control}\n                name=\"dateRange\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Date range</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant={\"outline\"}\n                            className={cn(\n                              \"w-[300px] justify-start text-left font-normal\",\n                              !field.value?.from && \"text-muted-foreground\"\n                            )}\n                          >\n                            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                            {field.value?.from ? (\n                              field.value.to ? (\n                                <>\n                                  {format(field.value.from, \"LLL dd, y\")} -{\" \"}\n                                  {format(field.value.to, \"LLL dd, y\")}\n                                </>\n                              ) : (\n                                format(field.value.from, \"LLL dd, y\")\n                              )\n                            ) : (\n                              <span>Pick a date range</span>\n                            )}\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          initialFocus\n                          mode=\"range\"\n                          defaultMonth={field.value?.from}\n                          selected={{\n                            from: field.value?.from,\n                            to: field.value?.to,\n                          }}\n                          onSelect={field.onChange}\n                          numberOfMonths={2}\n                          toDate={yesterday}\n                          disabled={(date) => date >= today}\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={isPending}>\n                {isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                Generate Report\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n      \n      {isPending && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Generating Report...</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n             <div className=\"space-y-2\">\n                <div className=\"h-6 w-1/4 rounded-md bg-muted animate-pulse\" />\n                <div className=\"h-4 w-full rounded-md bg-muted animate-pulse\" />\n                <div className=\"h-4 w-3/4 rounded-md bg-muted animate-pulse\" />\n             </div>\n             <div className=\"space-y-2 pt-4\">\n                <div className=\"h-6 w-1/3 rounded-md bg-muted animate-pulse\" />\n                <div className=\"h-4 w-1/2 rounded-md bg-muted animate-pulse\" />\n                <div className=\"h-4 w-1/2 rounded-md bg-muted animate-pulse\" />\n                <div className=\"h-4 w-1/2 rounded-md bg-muted animate-pulse\" />\n             </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {report && (\n         <ReportDisplay report={report} />\n      )}\n    </div>\n  );\n}\n","size_bytes":6232},"src/app/(main)/search/page.tsx":{"content":"import { Suspense } from \"react\";\nimport { intelligentDiagnosisSearch } from \"@/ai/flows/intelligent-diagnosis-search\";\nimport type { IntelligentDiagnosisSearchOutput } from \"@/ai/flows/intelligent-diagnosis-search\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport SearchForm from \"./search-form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ntype SearchPageProps = {\n  searchParams: {\n    query?: string;\n    filter?: \"Ayurveda\" | \"Siddha\" | \"Unani\";\n  };\n};\n\nexport default function SearchPage({ searchParams }: SearchPageProps) {\n  const { query, filter } = searchParams;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">\n          Intelligent Diagnosis Search\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Dual-code suggestions from NAMASTE and ICD-11 TM2.\n        </p>\n      </div>\n\n      <SearchForm initialQuery={query} initialFilter={filter} />\n\n      <Card>\n        <CardContent className=\"pt-6\">\n          <Suspense\n            key={query + filter}\n            fallback={<SearchResultsSkeleton />}\n          >\n            <SearchResults query={query} filter={filter} />\n          </Suspense>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nasync function SearchResults({ query, filter }: { query?: string; filter?: \"Ayurveda\" | \"Siddha\" | \"Unani\" }) {\n  if (!query) {\n    return (\n      <div className=\"flex h-40 items-center justify-center text-muted-foreground\">\n        <p>Please enter a search query to see results.</p>\n      </div>\n    );\n  }\n\n  const searchResults: IntelligentDiagnosisSearchOutput =\n    await intelligentDiagnosisSearch({\n      query,\n      ...(filter && { filter }),\n    });\n\n  if (!searchResults.results || searchResults.results.length === 0) {\n    return (\n      <div className=\"flex h-40 items-center justify-center text-muted-foreground\">\n        <p>No results found for &quot;{query}&quot;.</p>\n      </div>\n    );\n  }\n\n  return (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Description</TableHead>\n          <TableHead>NAMASTE Code</TableHead>\n          <TableHead>ICD-11 Code</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {searchResults.results.map((result, index) => (\n          <TableRow key={index}>\n            <TableCell className=\"font-medium\">{result.description}</TableCell>\n            <TableCell>{result.namasteCode}</TableCell>\n            <TableCell>{result.icd11Code}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SearchResultsSkeleton() {\n  return (\n    <div className=\"space-y-4\">\n      {Array.from({ length: 5 }).map((_, i) => (\n        <div key={i} className=\"flex items-center space-x-4\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-8 w-1/3\" />\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3076},"src/app/(main)/search/search-form.tsx":{"content":"\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useRouter, usePathname, useSearchParams } from \"next/navigation\";\nimport { Search } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\n\nconst searchSchema = z.object({\n  query: z.string().min(1, \"Search query cannot be empty\"),\n});\n\ntype SearchFormProps = {\n  initialQuery?: string;\n  initialFilter?: string;\n};\n\nexport default function SearchForm({\n  initialQuery = \"\",\n  initialFilter,\n}: SearchFormProps) {\n  const router = useRouter();\n  const pathname = usePathname();\n\n  const form = useForm<z.infer<typeof searchSchema>>({\n    resolver: zodResolver(searchSchema),\n    defaultValues: {\n      query: initialQuery,\n    },\n  });\n\n  const handleFilterChange = (value: string) => {\n    const params = new URLSearchParams(window.location.search);\n    if (value === \"all\") {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", value);\n    }\n    router.push(`${pathname}?${params.toString()}`);\n  };\n\n  function onSubmit(values: z.infer<typeof searchSchema>) {\n    const params = new URLSearchParams(window.location.search);\n    params.set(\"query\", values.query);\n    router.push(`${pathname}?${params.toString()}`);\n    form.reset({ query: \"\" });\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex flex-col md:flex-row md:items-end gap-4\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"flex-grow space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"query\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Search for a diagnosis</FormLabel>\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., Amavata, fever, headache...\"\n                          className=\"pl-10\"\n                          autoComplete=\"off\"\n                          {...field}\n                        />\n                      </FormControl>\n                    </div>\n                  </FormItem>\n                )}\n              />\n               <Button type=\"submit\" className=\"md:hidden w-full\">Search</Button>\n            </form>\n          </Form>\n\n          <div className=\"flex items-end gap-4\">\n            <div className=\"space-y-2\">\n              <Label>Filter by system</Label>\n              <Tabs\n                defaultValue={initialFilter || \"all\"}\n                onValueChange={handleFilterChange}\n              >\n                <TabsList>\n                  <TabsTrigger value=\"all\">All</TabsTrigger>\n                  <TabsTrigger value=\"Ayurveda\">Ayurveda</TabsTrigger>\n                  <TabsTrigger value=\"Siddha\">Siddha</TabsTrigger>\n                  <TabsTrigger value=\"Unani\">Unani</TabsTrigger>\n                </TabsList>\n              </Tabs>\n            </div>\n             <Button type=\"submit\" onClick={form.handleSubmit(onSubmit)} className=\"hidden md:inline-flex\">Search</Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3674},"src/app/(main)/settings/page.tsx":{"content":"\n\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useSearchParams } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { LogOut } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { useEffect } from \"react\";\n\nconst profileFormSchema = z.object({\n  name: z.string().min(2, {\n    message: \"Name must be at least 2 characters.\",\n  }),\n  email: z.string().email(),\n  specialty: z.string().optional(),\n});\n\nconst appearanceFormSchema = z.object({\n  darkMode: z.boolean().default(false),\n  language: z.string(),\n});\n\ntype ProfileFormValues = z.infer<typeof profileFormSchema>;\ntype AppearanceFormValues = z.infer<typeof appearanceFormSchema>;\n\n\nconst DoctorSettings = () => {\n    const { toast } = useToast();\n    const profileForm = useForm<ProfileFormValues>({\n        resolver: zodResolver(profileFormSchema),\n        defaultValues: {\n        name: \"Dr. Anya Sharma\",\n        email: \"doctor.anya@ayulink.com\",\n        specialty: \"Ayurvedic Medicine\",\n        },\n        mode: \"onChange\",\n    });\n\n     function onProfileSubmit(data: ProfileFormValues) {\n        toast({\n        title: \"Profile Updated\",\n        description: \"Your profile information has been successfully updated.\",\n        });\n    }\n\n    return (\n        <>\n            <Card>\n                <CardHeader>\n                <CardTitle>Profile</CardTitle>\n                <CardDescription>\n                    This is how others will see you on the site.\n                </CardDescription>\n                </CardHeader>\n                <CardContent>\n                <Form {...profileForm}>\n                    <form\n                    onSubmit={profileForm.handleSubmit(onProfileSubmit)}\n                    className=\"space-y-8\"\n                    >\n                    <FormField\n                        control={profileForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Name</FormLabel>\n                            <FormControl>\n                            <Input placeholder=\"Your name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                        )}\n                    />\n                    <FormField\n                        control={profileForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                            <Input placeholder=\"Your email\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                        )}\n                    />\n                    <FormField\n                        control={profileForm.control}\n                        name=\"specialty\"\n                        render={({ field }) => (\n                        <FormItem>\n                            <FormLabel>Specialty</FormLabel>\n                            <FormControl>\n                            <Input placeholder=\"e.g., Cardiology\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                        </FormItem>\n                        )}\n                    />\n                    <Button type=\"submit\">Update profile</Button>\n                    </form>\n                </Form>\n                </CardContent>\n            </Card>\n        </>\n    )\n}\n\nconst PatientSettings = () => {\n    const { toast } = useToast();\n    const profileForm = useForm<ProfileFormValues>({\n        resolver: zodResolver(profileFormSchema),\n        defaultValues: {\n        name: \"John Doe\",\n        email: \"patient.john@ayulink.com\",\n        },\n        mode: \"onChange\",\n    });\n\n     function onProfileSubmit(data: ProfileFormValues) {\n        toast({\n        title: \"Profile Updated\",\n        description: \"Your profile information has been successfully updated.\",\n        });\n    }\n\n    return (\n        <>\n        <Card>\n            <CardHeader>\n            <CardTitle>My Profile</CardTitle>\n            <CardDescription>\n                Manage your personal information.\n            </CardDescription>\n            </CardHeader>\n            <CardContent>\n            <Form {...profileForm}>\n                <form\n                onSubmit={profileForm.handleSubmit(onProfileSubmit)}\n                className=\"space-y-8\"\n                >\n                <FormField\n                    control={profileForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Name</FormLabel>\n                        <FormControl>\n                        <Input placeholder=\"Your name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <FormField\n                    control={profileForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                        <Input placeholder=\"Your email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                    </FormItem>\n                    )}\n                />\n                <Button type=\"submit\">Update profile</Button>\n                </form>\n            </Form>\n            </CardContent>\n        </Card>\n        </>\n    )\n}\n\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const searchParams = useSearchParams();\n  const role = searchParams.get('role') || 'doctor';\n\n  const appearanceForm = useForm<AppearanceFormValues>({\n    resolver: zodResolver(appearanceFormSchema),\n    defaultValues: {\n      darkMode: false,\n      language: \"en-us\",\n    },\n  });\n\n  useEffect(() => {\n    const isDarkMode = localStorage.getItem('theme') === 'dark';\n    appearanceForm.setValue('darkMode', isDarkMode);\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [appearanceForm]);\n  \n  function onAppearanceSubmit(data: AppearanceFormValues) {\n    if (data.darkMode) {\n      document.documentElement.classList.add('dark');\n      localStorage.setItem('theme', 'dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n      localStorage.setItem('theme', 'light');\n    }\n    toast({\n      title: \"Appearance Settings Saved\",\n      description: \"Your appearance preferences have been saved.\",\n    });\n  }\n\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account settings and preferences.\n        </p>\n      </div>\n      \n      {role === 'doctor' ? <DoctorSettings /> : <PatientSettings />}\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Appearance</CardTitle>\n          <CardDescription>\n            Customize the look and feel of the application.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...appearanceForm}>\n            <form\n              onSubmit={appearanceForm.handleSubmit(onAppearanceSubmit)}\n              className=\"space-y-8\"\n            >\n              <FormField\n                control={appearanceForm.control}\n                name=\"darkMode\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Dark Mode\n                      </FormLabel>\n                      <FormDescription>\n                       Enable dark mode for the application.\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\">Update appearance</Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Account Actions</CardTitle>\n          <CardDescription>\n            Log out of your account.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n           <Button variant=\"destructive\" asChild>\n              <Link href=\"/\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log Out\n              </Link>\n            </Button>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":9610},"src/app/(main)/upload/page.tsx":{"content":"\n\"use client\";\n\nimport { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { FileUp, Upload, CheckCircle, AlertCircle, Info, List } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ntype UploadedFile = {\n  name: string;\n  size: number;\n  timestamp: number;\n};\n\nexport default function UploadPage() {\n  const [file, setFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>(() => {\n    if (typeof window === 'undefined') return [];\n    const savedFiles = localStorage.getItem(\"uploadedFiles\");\n    if (savedFiles) {\n      const files: UploadedFile[] = JSON.parse(savedFiles);\n      // Filter out files older than 24 hours\n      const now = Date.now();\n      const oneDay = 24 * 60 * 60 * 1000;\n      return files.filter(f => now - f.timestamp < oneDay);\n    }\n    return [];\n  });\n  \n  const { toast } = useToast();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      setFile(e.target.files[0]);\n      setUploadProgress(0);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) {\n       toast({\n        variant: \"destructive\",\n        title: \"No file selected\",\n        description: \"Please select a file to upload.\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    \n    // Simulate upload progress\n    const progressInterval = setInterval(() => {\n      setUploadProgress((prev) => {\n        if (prev >= 95) {\n          clearInterval(progressInterval);\n          return 95;\n        }\n        return prev + 5;\n      });\n    }, 100);\n\n    // Simulate network delay\n    await new Promise((resolve) => setTimeout(resolve, 2000));\n    clearInterval(progressInterval);\n    setUploadProgress(100);\n\n    const newFile: UploadedFile = {\n      name: file.name,\n      size: file.size,\n      timestamp: Date.now(),\n    };\n\n    const updatedFiles = [newFile, ...uploadedFiles];\n    setUploadedFiles(updatedFiles);\n    localStorage.setItem(\"uploadedFiles\", JSON.stringify(updatedFiles));\n    \n    toast({\n      title: \"Upload Successful\",\n      description: `File \"${file.name}\" has been uploaded.`,\n    });\n    \n    setIsUploading(false);\n    setFile(null);\n  };\n\n  return (\n    <div className=\"space-y-8 animate-fade-in\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Upload Report</h1>\n        <p className=\"text-muted-foreground\">\n          Add a new patient report to the system.\n        </p>\n      </div>\n\n       <Alert>\n        <Info className=\"h-4 w-4\" />\n        <AlertTitle>File Format Reminder</AlertTitle>\n        <AlertDescription>\n          Please ensure your file is in one of the accepted formats: PDF, JPG, or PNG.\n        </AlertDescription>\n      </Alert>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Upload New Patient File</CardTitle>\n          <CardDescription>\n            Select a file from your device and click upload.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex flex-col items-center justify-center p-12 border-2 border-dashed border-muted rounded-lg text-center space-y-4\">\n            <FileUp className=\"h-16 w-16 text-muted-foreground\" />\n             <Input\n              id=\"file-upload\"\n              type=\"file\"\n              onChange={handleFileChange}\n              className=\"w-full max-w-sm\"\n              disabled={isUploading}\n              accept=\".pdf,.jpg,.jpeg,.png\"\n            />\n            {file && <p className=\"text-sm text-muted-foreground\">Selected file: {file.name}</p>}\n          </div>\n\n           <Button onClick={handleUpload} disabled={isUploading || !file} className=\"w-full\">\n            {isUploading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary-foreground mr-2\"></div>\n                Uploading...\n              </>\n            ) : (\n              <>\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload File\n              </>\n            )}\n          </Button>\n\n          {isUploading && (\n             <Progress value={uploadProgress} className=\"w-full\" />\n          )}\n\n        </CardContent>\n      </Card>\n      \n      {uploadedFiles.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <List className=\"h-5 w-5\" />\n              Recent Uploads (last 24 hours)\n            </CardTitle>\n            <CardDescription>\n              Files you've recently uploaded to the system.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-3\">\n              {uploadedFiles.map((uploadedFile, index) => (\n                <li key={index} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-sm\">{uploadedFile.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {(uploadedFile.size / 1024).toFixed(2)} KB - Uploaded {formatDistanceToNow(uploadedFile.timestamp, { addSuffix: true })}\n                    </p>\n                  </div>\n                   <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      )}\n\n    </div>\n  );\n}\n","size_bytes":5907}},"version":1}